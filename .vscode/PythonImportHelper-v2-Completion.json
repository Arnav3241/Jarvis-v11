[
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getcwd",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getcwd",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "mixer",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "mixer",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "pvporcupine",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pvporcupine",
        "description": "pvporcupine",
        "detail": "pvporcupine",
        "documentation": {}
    },
    {
        "label": "struct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct",
        "description": "struct",
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "pyaudio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyaudio",
        "description": "pyaudio",
        "detail": "pyaudio",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "keyboard",
        "description": "keyboard",
        "detail": "keyboard",
        "documentation": {}
    },
    {
        "label": "eel",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "eel",
        "description": "eel",
        "detail": "eel",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "ollama",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ollama",
        "description": "ollama",
        "detail": "ollama",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "get",
        "importPath": "requests",
        "description": "requests",
        "isExtraImport": true,
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "playsound",
        "importPath": "playsound",
        "description": "playsound",
        "isExtraImport": true,
        "detail": "playsound",
        "documentation": {}
    },
    {
        "label": "with_statement",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "base64,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64.",
        "description": "base64.",
        "detail": "base64.",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "TemporaryFile",
        "importPath": "tempfile",
        "description": "tempfile",
        "isExtraImport": true,
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "format_exc",
        "importPath": "traceback",
        "description": "traceback",
        "isExtraImport": true,
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "print_exc",
        "importPath": "traceback",
        "description": "traceback",
        "isExtraImport": true,
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "normalize",
        "importPath": "unicodedata",
        "description": "unicodedata",
        "isExtraImport": true,
        "detail": "unicodedata",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Interface.IF",
        "description": "Interface.IF",
        "isExtraImport": true,
        "detail": "Interface.IF",
        "documentation": {}
    },
    {
        "label": "Listen",
        "kind": 2,
        "importPath": "Functions.Listen.listen",
        "description": "Functions.Listen.listen",
        "peekOfCode": "def Listen():\n  driver.get(website)\n  driver.find_element(by=By.ID, value='start').click()\n  print(\"Listening ...\")\n  while True:\n    text = driver.find_element(by=By.ID, value='output').text\n    if text != \"\":\n      print(f\"You : {text}\")\n      driver.find_element(by=By.ID, value='end').click()\n      return text",
        "detail": "Functions.Listen.listen",
        "documentation": {}
    },
    {
        "label": "os.environ['WDM_LOG']",
        "kind": 5,
        "importPath": "Functions.Listen.listen",
        "description": "Functions.Listen.listen",
        "peekOfCode": "os.environ['WDM_LOG'] = '0'\nservice = Service(ChromeDriverManager().install())\nchrome_options = webdriver.ChromeOptions()\nchrome_options.add_argument(\"--use-fake-ui-for-media-stream\")\nchrome_options.add_argument(\"--headless=new\")\ndriver = webdriver.Chrome(service=service, options=chrome_options)\nwebsite = f\"{getcwd()}//Functions//Listen2//Recognition//index.html\"\ndriver.get(website)\ndef Listen():\n  driver.get(website)",
        "detail": "Functions.Listen.listen",
        "documentation": {}
    },
    {
        "label": "service",
        "kind": 5,
        "importPath": "Functions.Listen.listen",
        "description": "Functions.Listen.listen",
        "peekOfCode": "service = Service(ChromeDriverManager().install())\nchrome_options = webdriver.ChromeOptions()\nchrome_options.add_argument(\"--use-fake-ui-for-media-stream\")\nchrome_options.add_argument(\"--headless=new\")\ndriver = webdriver.Chrome(service=service, options=chrome_options)\nwebsite = f\"{getcwd()}//Functions//Listen2//Recognition//index.html\"\ndriver.get(website)\ndef Listen():\n  driver.get(website)\n  driver.find_element(by=By.ID, value='start').click()",
        "detail": "Functions.Listen.listen",
        "documentation": {}
    },
    {
        "label": "chrome_options",
        "kind": 5,
        "importPath": "Functions.Listen.listen",
        "description": "Functions.Listen.listen",
        "peekOfCode": "chrome_options = webdriver.ChromeOptions()\nchrome_options.add_argument(\"--use-fake-ui-for-media-stream\")\nchrome_options.add_argument(\"--headless=new\")\ndriver = webdriver.Chrome(service=service, options=chrome_options)\nwebsite = f\"{getcwd()}//Functions//Listen2//Recognition//index.html\"\ndriver.get(website)\ndef Listen():\n  driver.get(website)\n  driver.find_element(by=By.ID, value='start').click()\n  print(\"Listening ...\")",
        "detail": "Functions.Listen.listen",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "Functions.Listen.listen",
        "description": "Functions.Listen.listen",
        "peekOfCode": "driver = webdriver.Chrome(service=service, options=chrome_options)\nwebsite = f\"{getcwd()}//Functions//Listen2//Recognition//index.html\"\ndriver.get(website)\ndef Listen():\n  driver.get(website)\n  driver.find_element(by=By.ID, value='start').click()\n  print(\"Listening ...\")\n  while True:\n    text = driver.find_element(by=By.ID, value='output').text\n    if text != \"\":",
        "detail": "Functions.Listen.listen",
        "documentation": {}
    },
    {
        "label": "website",
        "kind": 5,
        "importPath": "Functions.Listen.listen",
        "description": "Functions.Listen.listen",
        "peekOfCode": "website = f\"{getcwd()}//Functions//Listen2//Recognition//index.html\"\ndriver.get(website)\ndef Listen():\n  driver.get(website)\n  driver.find_element(by=By.ID, value='start').click()\n  print(\"Listening ...\")\n  while True:\n    text = driver.find_element(by=By.ID, value='output').text\n    if text != \"\":\n      print(f\"You : {text}\")",
        "detail": "Functions.Listen.listen",
        "documentation": {}
    },
    {
        "label": "wake",
        "kind": 2,
        "importPath": "Functions.Wake.wake",
        "description": "Functions.Wake.wake",
        "peekOfCode": "def wake():\n  porcupine = None\n  pa = None\n  audio_stream = None\n  try:\n      porcupine = pvporcupine.create(keywords=['jarvis'])\n      pa = pyaudio.PyAudio()\n      audio_stream = pa.open(\n        rate=porcupine.sample_rate,\n        channels=1,",
        "detail": "Functions.Wake.wake",
        "documentation": {}
    },
    {
        "label": "PrintPyLog",
        "kind": 2,
        "importPath": "Interface.IF",
        "description": "Interface.IF",
        "peekOfCode": "def PrintPyLog(*args):\n  statement = \"\"\n  for i in args: statement += str(i) + \" \"\n  print(f\"#JS-Log: {statement}\")",
        "detail": "Interface.IF",
        "documentation": {}
    },
    {
        "label": "Listen",
        "kind": 2,
        "importPath": "Tests.Listen.listen",
        "description": "Tests.Listen.listen",
        "peekOfCode": "def Listen():\n    # Printing a message to indicate that the program is listening\n    print( \"LISTENING ... \")\n    # Opening the website in the Chrome browser\n    driver.get(website)\n    # Clicking the 'start' button on the website to initiate voice recognition\n    driver.find_element(by=By.ID, value='start').click()\n    # Running an infinite loop to continuously listen for voice input\n    while True:\n        # Recording the start time to calculate the time taken for voice recognition",
        "detail": "Tests.Listen.listen",
        "documentation": {}
    },
    {
        "label": "chrome_options",
        "kind": 5,
        "importPath": "Tests.Listen.listen",
        "description": "Tests.Listen.listen",
        "peekOfCode": "chrome_options = webdriver.ChromeOptions()  # Creating ChromeOptions to customize the behavior of the Chrome browser\nchrome_options.add_argument(\"--use-fake-ui-for-media-stream\")  # Adding an argument to simulate a fake UI for media stream\nchrome_options.add_argument(\"--headless=new\")  # Adding an argument to run Chrome in headless mode with a new session\nservice = Service(executable_path=\".\\\\CHROMEDRIVER\\\\chromedriver.exe\")\n# Setting up the Chrome driver with specified service and options\ndriver = webdriver.Chrome(service=service, options=chrome_options)\n# Creating the URL for the website using the current working directory\nwebsite = f\"{getcwd()}\\\\Functions\\\\Listen\\\\index.html\"\n# Opening the website in the Chrome browser\ndriver.get(website)",
        "detail": "Tests.Listen.listen",
        "documentation": {}
    },
    {
        "label": "service",
        "kind": 5,
        "importPath": "Tests.Listen.listen",
        "description": "Tests.Listen.listen",
        "peekOfCode": "service = Service(executable_path=\".\\\\CHROMEDRIVER\\\\chromedriver.exe\")\n# Setting up the Chrome driver with specified service and options\ndriver = webdriver.Chrome(service=service, options=chrome_options)\n# Creating the URL for the website using the current working directory\nwebsite = f\"{getcwd()}\\\\Functions\\\\Listen\\\\index.html\"\n# Opening the website in the Chrome browser\ndriver.get(website)\n# Defining a function named Listen\ndef Listen():\n    # Printing a message to indicate that the program is listening",
        "detail": "Tests.Listen.listen",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "Tests.Listen.listen",
        "description": "Tests.Listen.listen",
        "peekOfCode": "driver = webdriver.Chrome(service=service, options=chrome_options)\n# Creating the URL for the website using the current working directory\nwebsite = f\"{getcwd()}\\\\Functions\\\\Listen\\\\index.html\"\n# Opening the website in the Chrome browser\ndriver.get(website)\n# Defining a function named Listen\ndef Listen():\n    # Printing a message to indicate that the program is listening\n    print( \"LISTENING ... \")\n    # Opening the website in the Chrome browser",
        "detail": "Tests.Listen.listen",
        "documentation": {}
    },
    {
        "label": "website",
        "kind": 5,
        "importPath": "Tests.Listen.listen",
        "description": "Tests.Listen.listen",
        "peekOfCode": "website = f\"{getcwd()}\\\\Functions\\\\Listen\\\\index.html\"\n# Opening the website in the Chrome browser\ndriver.get(website)\n# Defining a function named Listen\ndef Listen():\n    # Printing a message to indicate that the program is listening\n    print( \"LISTENING ... \")\n    # Opening the website in the Chrome browser\n    driver.get(website)\n    # Clicking the 'start' button on the website to initiate voice recognition",
        "detail": "Tests.Listen.listen",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Tests.1_Ollama",
        "description": "Tests.1_Ollama",
        "peekOfCode": "response = ollama.chat(model='llama2', messages=[\n  {\n    'role': 'user',\n    'content': 'Why is the sky blue?',\n  },\n])\nprint(response['message']['content'])\n#? Need to install models on local computer -> Not Possible",
        "detail": "Tests.1_Ollama",
        "documentation": {}
    },
    {
        "label": "removeFilesfromFolder",
        "kind": 2,
        "importPath": "Tests.1_Speak",
        "description": "Tests.1_Speak",
        "peekOfCode": "def removeFilesfromFolder(folder:str):\n  for filename in os.listdir(folder):\n    if filename == \"music.mp3\": return\n    file_path = os.path.join(folder, filename)\n    try:\n      if os.path.isfile(file_path) or os.path.islink(file_path):\n        os.unlink(file_path)\n      elif os.path.isdir(file_path):\n        shutil.rmtree(file_path)\n    except Exception as e:",
        "detail": "Tests.1_Speak",
        "documentation": {}
    },
    {
        "label": "PlayURL",
        "kind": 2,
        "importPath": "Tests.1_Speak",
        "description": "Tests.1_Speak",
        "peekOfCode": "def PlayURL(URL: str):\n  tss = time.time()\n  x = get(URL).content\n  name = f'{os.getcwd()}\\Audio\\{int(time.time())}.mp3'\n  # removeFilesfromFolder(f'{os.getcwd()}\\Audio')\n  with open(name,'wb') as file:\n    file.write(x)\n  print(f\"Time taken to download the file: {time.time() - tss} seconds\")\n  tts = time.time()\n  mixer.music.load(name)",
        "detail": "Tests.1_Speak",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "Tests.1_Speak",
        "description": "Tests.1_Speak",
        "peekOfCode": "url = \"https://ttsmp3.com/makemp3_ai.php\"\nheaders = {\n  'authority': 'ttsmp3.com',\n  'accept': '*/*',\n  'accept-language': 'en-US,en;q=0.9',\n  'content-type': 'application/x-www-form-urlencoded',\n  'origin': 'https://ttsmp3.com',\n  'referer': 'https://ttsmp3.com/ai',\n  'sec-fetch-mode': 'cors',\n  'sec-fetch-site': 'same-origin'",
        "detail": "Tests.1_Speak",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "Tests.1_Speak",
        "description": "Tests.1_Speak",
        "peekOfCode": "headers = {\n  'authority': 'ttsmp3.com',\n  'accept': '*/*',\n  'accept-language': 'en-US,en;q=0.9',\n  'content-type': 'application/x-www-form-urlencoded',\n  'origin': 'https://ttsmp3.com',\n  'referer': 'https://ttsmp3.com/ai',\n  'sec-fetch-mode': 'cors',\n  'sec-fetch-site': 'same-origin'\n}",
        "detail": "Tests.1_Speak",
        "documentation": {}
    },
    {
        "label": "service",
        "kind": 5,
        "importPath": "Tests.2_Speak",
        "description": "Tests.2_Speak",
        "peekOfCode": "service = Service(ChromeDriverManager().install())\ndriver = webdriver.Chrome(service=service)\nwebsite = \"https://pi.ai/talk\"\ntext = \"To calculate the probability of winning more than one giveaway, we can use the binomial probability formula.\"\ndriver.get(website)\ntime.sleep(3)\ndriver.find_element(by=By.XPATH, value=\"//*[@id=\\\"__next\\\"]/main/div/div/button\").click()\ntime.sleep(3)\ndriver.find_element(by=By.XPATH, value=\"//*[@id=\\\"__next\\\"]/main/div/div/button\").click()\ntime.sleep(3)",
        "detail": "Tests.2_Speak",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "Tests.2_Speak",
        "description": "Tests.2_Speak",
        "peekOfCode": "driver = webdriver.Chrome(service=service)\nwebsite = \"https://pi.ai/talk\"\ntext = \"To calculate the probability of winning more than one giveaway, we can use the binomial probability formula.\"\ndriver.get(website)\ntime.sleep(3)\ndriver.find_element(by=By.XPATH, value=\"//*[@id=\\\"__next\\\"]/main/div/div/button\").click()\ntime.sleep(3)\ndriver.find_element(by=By.XPATH, value=\"//*[@id=\\\"__next\\\"]/main/div/div/button\").click()\ntime.sleep(3)\ndriver.find_element(by=By.XPATH, value=\"//*[@id=\\\"__next\\\"]/main/div/div/div[1]/div[1]/div[2]/button[2]\").click()",
        "detail": "Tests.2_Speak",
        "documentation": {}
    },
    {
        "label": "website",
        "kind": 5,
        "importPath": "Tests.2_Speak",
        "description": "Tests.2_Speak",
        "peekOfCode": "website = \"https://pi.ai/talk\"\ntext = \"To calculate the probability of winning more than one giveaway, we can use the binomial probability formula.\"\ndriver.get(website)\ntime.sleep(3)\ndriver.find_element(by=By.XPATH, value=\"//*[@id=\\\"__next\\\"]/main/div/div/button\").click()\ntime.sleep(3)\ndriver.find_element(by=By.XPATH, value=\"//*[@id=\\\"__next\\\"]/main/div/div/button\").click()\ntime.sleep(3)\ndriver.find_element(by=By.XPATH, value=\"//*[@id=\\\"__next\\\"]/main/div/div/div[1]/div[1]/div[2]/button[2]\").click()\ntime.sleep(3)",
        "detail": "Tests.2_Speak",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "Tests.2_Speak",
        "description": "Tests.2_Speak",
        "peekOfCode": "text = \"To calculate the probability of winning more than one giveaway, we can use the binomial probability formula.\"\ndriver.get(website)\ntime.sleep(3)\ndriver.find_element(by=By.XPATH, value=\"//*[@id=\\\"__next\\\"]/main/div/div/button\").click()\ntime.sleep(3)\ndriver.find_element(by=By.XPATH, value=\"//*[@id=\\\"__next\\\"]/main/div/div/button\").click()\ntime.sleep(3)\ndriver.find_element(by=By.XPATH, value=\"//*[@id=\\\"__next\\\"]/main/div/div/div[1]/div[1]/div[2]/button[2]\").click()\ntime.sleep(3)\ndriver.find_element(by=By.XPATH, value=\"//*[@id=\\\"__next\\\"]/main/div/div/div/div/div/div[1]/div/div[1]/button[2]\").click()",
        "detail": "Tests.2_Speak",
        "documentation": {}
    },
    {
        "label": "play_mp3",
        "kind": 2,
        "importPath": "Tests.playsoundT",
        "description": "Tests.playsoundT",
        "peekOfCode": "def play_mp3(file_path):\n    playsound(file_path)\n# Example usage\nmp3_file = \"/path/to/your/file.mp3\"\nplay_mp3(mp3_file)",
        "detail": "Tests.playsoundT",
        "documentation": {}
    },
    {
        "label": "mp3_file",
        "kind": 5,
        "importPath": "Tests.playsoundT",
        "description": "Tests.playsoundT",
        "peekOfCode": "mp3_file = \"/path/to/your/file.mp3\"\nplay_mp3(mp3_file)",
        "detail": "Tests.playsoundT",
        "documentation": {}
    },
    {
        "label": "DictProperty",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class DictProperty(object):\n    ''' Property that maps to a key in a local dict-like attribute. '''\n    def __init__(self, attr, key=None, read_only=False):\n        self.attr, self.key, self.read_only = attr, key, read_only\n    def __call__(self, func):\n        functools.update_wrapper(self, func, updated=[])\n        self.getter, self.key = func, self.key or func.__name__\n        return self\n    def __get__(self, obj, cls):\n        if obj is None: return self",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "cached_property",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class cached_property(object):\n    ''' A property that is only computed once per instance and then replaces\n        itself with an ordinary attribute. Deleting the attribute resets the\n        property. '''\n    def __init__(self, func):\n        self.__doc__ = getattr(func, '__doc__')\n        self.func = func\n    def __get__(self, obj, cls):\n        if obj is None: return self\n        value = obj.__dict__[self.func.__name__] = self.func(obj)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "lazy_attribute",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class lazy_attribute(object):\n    ''' A property that caches itself to the class object. '''\n    def __init__(self, func):\n        functools.update_wrapper(self, func, updated=[])\n        self.getter = func\n    def __get__(self, obj, cls):\n        value = self.getter(cls)\n        setattr(cls, self.__name__, value)\n        return value\n###############################################################################",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "BottleException",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class BottleException(Exception):\n    \"\"\" A base class for exceptions used by bottle. \"\"\"\n    pass\n###############################################################################\n# Routing ######################################################################\n###############################################################################\nclass RouteError(BottleException):\n    \"\"\" This is a base class for all routing related exceptions \"\"\"\nclass RouteReset(BottleException):\n    \"\"\" If raised by a plugin or request handler, the route is reset and all",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "RouteError",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class RouteError(BottleException):\n    \"\"\" This is a base class for all routing related exceptions \"\"\"\nclass RouteReset(BottleException):\n    \"\"\" If raised by a plugin or request handler, the route is reset and all\n        plugins are re-applied. \"\"\"\nclass RouterUnknownModeError(RouteError): pass\nclass RouteSyntaxError(RouteError):\n    \"\"\" The route parser found something not supported by this router. \"\"\"\nclass RouteBuildError(RouteError):\n    \"\"\" The route could not be built. \"\"\"",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "RouteReset",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class RouteReset(BottleException):\n    \"\"\" If raised by a plugin or request handler, the route is reset and all\n        plugins are re-applied. \"\"\"\nclass RouterUnknownModeError(RouteError): pass\nclass RouteSyntaxError(RouteError):\n    \"\"\" The route parser found something not supported by this router. \"\"\"\nclass RouteBuildError(RouteError):\n    \"\"\" The route could not be built. \"\"\"\ndef _re_flatten(p):\n    ''' Turn all capturing groups in a regular expression pattern into",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "RouterUnknownModeError",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class RouterUnknownModeError(RouteError): pass\nclass RouteSyntaxError(RouteError):\n    \"\"\" The route parser found something not supported by this router. \"\"\"\nclass RouteBuildError(RouteError):\n    \"\"\" The route could not be built. \"\"\"\ndef _re_flatten(p):\n    ''' Turn all capturing groups in a regular expression pattern into\n        non-capturing groups. '''\n    if '(' not in p: return p\n    return re.sub(r'(\\\\*)(\\(\\?P<[^>]+>|\\((?!\\?))',",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "RouteSyntaxError",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class RouteSyntaxError(RouteError):\n    \"\"\" The route parser found something not supported by this router. \"\"\"\nclass RouteBuildError(RouteError):\n    \"\"\" The route could not be built. \"\"\"\ndef _re_flatten(p):\n    ''' Turn all capturing groups in a regular expression pattern into\n        non-capturing groups. '''\n    if '(' not in p: return p\n    return re.sub(r'(\\\\*)(\\(\\?P<[^>]+>|\\((?!\\?))',\n        lambda m: m.group(0) if len(m.group(1)) % 2 else m.group(1) + '(?:', p)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "RouteBuildError",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class RouteBuildError(RouteError):\n    \"\"\" The route could not be built. \"\"\"\ndef _re_flatten(p):\n    ''' Turn all capturing groups in a regular expression pattern into\n        non-capturing groups. '''\n    if '(' not in p: return p\n    return re.sub(r'(\\\\*)(\\(\\?P<[^>]+>|\\((?!\\?))',\n        lambda m: m.group(0) if len(m.group(1)) % 2 else m.group(1) + '(?:', p)\nclass Router(object):\n    ''' A Router is an ordered collection of route->target pairs. It is used to",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Router",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class Router(object):\n    ''' A Router is an ordered collection of route->target pairs. It is used to\n        efficiently match WSGI requests against a number of routes and return\n        the first target that satisfies the request. The target may be anything,\n        usually a string, ID or callable object. A route consists of a path-rule\n        and a HTTP method.\n        The path-rule is either a static path (e.g. `/contact`) or a dynamic\n        path that contains wildcards (e.g. `/wiki/<page>`). The wildcard syntax\n        and details on the matching order are described in docs:`routing`.\n    '''",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Route",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class Route(object):\n    ''' This class wraps a route callback along with route specific metadata and\n        configuration and applies Plugins on demand. It is also responsible for\n        turing an URL path rule into a regular expression usable by the Router.\n    '''\n    def __init__(self, app, rule, method, callback, name=None,\n                 plugins=None, skiplist=None, **config):\n        #: The application this route is installed to.\n        self.app = app\n        #: The path-rule string (e.g. ``/wiki/:page``).",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Bottle",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class Bottle(object):\n    \"\"\" Each Bottle object represents a single, distinct web application and\n        consists of routes, callbacks, plugins, resources and configuration.\n        Instances are callable WSGI applications.\n        :param catchall: If true (default), handle all exceptions. Turn off to\n                         let debugging middleware handle exceptions.\n    \"\"\"\n    def __init__(self, catchall=True, autojson=True):\n        #: A :class:`ConfigDict` for app specific configuration.\n        self.config = ConfigDict()",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "BaseRequest",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class BaseRequest(object):\n    \"\"\" A wrapper for WSGI environment dictionaries that adds a lot of\n        convenient access methods and properties. Most of them are read-only.\n        Adding new attributes to a request actually adds them to the environ\n        dictionary (as 'bottle.request.ext.<name>'). This is the recommended\n        way to store and access request-specific data.\n    \"\"\"\n    __slots__ = ('environ')\n    #: Maximum size of memory buffer for :attr:`body` in bytes.\n    MEMFILE_MAX = 102400",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HeaderProperty",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class HeaderProperty(object):\n    def __init__(self, name, reader=None, writer=None, default=''):\n        self.name, self.default = name, default\n        self.reader, self.writer = reader, writer\n        self.__doc__ = 'Current value of the %r header.' % name.title()\n    def __get__(self, obj, cls):\n        if obj is None: return self\n        value = obj.get_header(self.name, self.default)\n        return self.reader(value) if self.reader else value\n    def __set__(self, obj, value):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "BaseResponse",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class BaseResponse(object):\n    \"\"\" Storage class for a response body as well as headers and cookies.\n        This class does support dict-like case-insensitive item-access to\n        headers, but is NOT a dict. Most notably, iterating over a response\n        yields parts of the body and not the headers.\n        :param body: The response body as one of the supported types.\n        :param status: Either an HTTP status code (e.g. 200) or a status line\n                       including the reason phrase (e.g. '200 OK').\n        :param headers: A dictionary or a list of name-value pairs.\n        Additional keyword arguments are added to the list of headers.",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "LocalRequest",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class LocalRequest(BaseRequest):\n    ''' A thread-local subclass of :class:`BaseRequest` with a different\n        set of attributes for each thread. There is usually only one global\n        instance of this class (:data:`request`). If accessed during a\n        request/response cycle, this instance always refers to the *current*\n        request (even on a multithreaded server). '''\n    bind = BaseRequest.__init__\n    environ = local_property()\nclass LocalResponse(BaseResponse):\n    ''' A thread-local subclass of :class:`BaseResponse` with a different",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "LocalResponse",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class LocalResponse(BaseResponse):\n    ''' A thread-local subclass of :class:`BaseResponse` with a different\n        set of attributes for each thread. There is usually only one global\n        instance of this class (:data:`response`). Its attributes are used\n        to build the HTTP response at the end of the request/response cycle.\n    '''\n    bind = BaseResponse.__init__\n    _status_line = local_property()\n    _status_code = local_property()\n    _cookies     = local_property()",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTPResponse",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class HTTPResponse(Response, BottleException):\n    def __init__(self, body='', status=None, headers=None, **more_headers):\n        super(HTTPResponse, self).__init__(body, status, headers, **more_headers)\n    def apply(self, response):\n        response._status_code = self._status_code\n        response._status_line = self._status_line\n        response._headers = self._headers\n        response._cookies = self._cookies\n        response.body = self.body\nclass HTTPError(HTTPResponse):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTPError",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class HTTPError(HTTPResponse):\n    default_status = 500\n    def __init__(self, status=None, body=None, exception=None, traceback=None,\n                 **options):\n        self.exception = exception\n        self.traceback = traceback\n        super(HTTPError, self).__init__(body, status, **options)\n###############################################################################\n# Plugins ######################################################################\n###############################################################################",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "PluginError",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class PluginError(BottleException): pass\nclass JSONPlugin(object):\n    name = 'json'\n    api  = 2\n    def __init__(self, json_dumps=json_dumps):\n        self.json_dumps = json_dumps\n    def apply(self, callback, route):\n        dumps = self.json_dumps\n        if not dumps: return callback\n        def wrapper(*a, **ka):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "JSONPlugin",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class JSONPlugin(object):\n    name = 'json'\n    api  = 2\n    def __init__(self, json_dumps=json_dumps):\n        self.json_dumps = json_dumps\n    def apply(self, callback, route):\n        dumps = self.json_dumps\n        if not dumps: return callback\n        def wrapper(*a, **ka):\n            try:",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "TemplatePlugin",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class TemplatePlugin(object):\n    ''' This plugin applies the :func:`view` decorator to all routes with a\n        `template` config parameter. If the parameter is a tuple, the second\n        element must be a dict with additional options (e.g. `template_engine`)\n        or default variables for the template. '''\n    name = 'template'\n    api  = 2\n    def apply(self, callback, route):\n        conf = route.config.get('template')\n        if isinstance(conf, (tuple, list)) and len(conf) == 2:",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_ImportRedirect",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class _ImportRedirect(object):\n    def __init__(self, name, impmask):\n        ''' Create a virtual package that redirects imports (see PEP 302). '''\n        self.name = name\n        self.impmask = impmask\n        self.module = sys.modules.setdefault(name, new_module(name))\n        self.module.__dict__.update({'__file__': __file__, '__path__': [],\n                                    '__all__': [], '__loader__': self})\n        sys.meta_path.append(self)\n    def find_module(self, fullname, path=None):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "MultiDict",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class MultiDict(DictMixin):\n    \"\"\" This dict stores multiple values per key, but behaves exactly like a\n        normal dict in that it returns only the newest value for any given key.\n        There are special methods available to access the full list of values.\n    \"\"\"\n    def __init__(self, *a, **k):\n        self.dict = dict((k, [v]) for (k, v) in dict(*a, **k).items())\n    def __len__(self): return len(self.dict)\n    def __iter__(self): return iter(self.dict)\n    def __contains__(self, key): return key in self.dict",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "FormsDict",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class FormsDict(MultiDict):\n    ''' This :class:`MultiDict` subclass is used to store request form data.\n        Additionally to the normal dict-like item access methods (which return\n        unmodified data as native strings), this container also supports\n        attribute-like access to its values. Attributes are automatically de-\n        or recoded to match :attr:`input_encoding` (default: 'utf8'). Missing\n        attributes default to an empty string. '''\n    #: Encoding used for attribute values.\n    input_encoding = 'utf8'\n    #: If true (default), unicode strings are first encoded with `latin1`",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HeaderDict",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class HeaderDict(MultiDict):\n    \"\"\" A case-insensitive version of :class:`MultiDict` that defaults to\n        replace the old value instead of appending it. \"\"\"\n    def __init__(self, *a, **ka):\n        self.dict = {}\n        if a or ka: self.update(*a, **ka)\n    def __contains__(self, key): return _hkey(key) in self.dict\n    def __delitem__(self, key): del self.dict[_hkey(key)]\n    def __getitem__(self, key): return self.dict[_hkey(key)][-1]\n    def __setitem__(self, key, value): self.dict[_hkey(key)] = [_hval(value)]",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "WSGIHeaderDict",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class WSGIHeaderDict(DictMixin):\n    ''' This dict-like class wraps a WSGI environ dict and provides convenient\n        access to HTTP_* fields. Keys and values are native strings\n        (2.x bytes or 3.x unicode) and keys are case-insensitive. If the WSGI\n        environment contains non-native string values, these are de- or encoded\n        using a lossless 'latin1' character set.\n        The API will remain stable even on changes to the relevant PEPs.\n        Currently PEP 333, 444 and 3333 are supported. (PEP 444 is the only one\n        that uses non-native strings.)\n    '''",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class ConfigDict(dict):\n    ''' A dict-like configuration storage with additional support for\n        namespaces, validators, meta-data, on_change listeners and more.\n        This storage is optimized for fast read access. Retrieving a key\n        or using non-altering dict methods (e.g. `dict.get()`) has no overhead\n        compared to a native dict.\n    '''\n    __slots__ = ('_meta', '_on_change')\n    class Namespace(DictMixin):\n        def __init__(self, config, namespace):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "AppStack",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class AppStack(list):\n    \"\"\" A stack-like list. Calling it returns the head of the stack. \"\"\"\n    def __call__(self):\n        \"\"\" Return the current default application. \"\"\"\n        return self[-1]\n    def push(self, value=None):\n        \"\"\" Add a new :class:`Bottle` instance to the stack \"\"\"\n        if not isinstance(value, Bottle):\n            value = Bottle()\n        self.append(value)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "WSGIFileWrapper",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class WSGIFileWrapper(object):\n    def __init__(self, fp, buffer_size=1024*64):\n        self.fp, self.buffer_size = fp, buffer_size\n        for attr in ('fileno', 'close', 'read', 'readlines', 'tell', 'seek'):\n            if hasattr(fp, attr): setattr(self, attr, getattr(fp, attr))\n    def __iter__(self):\n        buff, read = self.buffer_size, self.read\n        while True:\n            part = read(buff)\n            if not part: return",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_closeiter",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class _closeiter(object):\n    ''' This only exists to be able to attach a .close method to iterators that\n        do not support attribute assignment (most of itertools). '''\n    def __init__(self, iterator, close=None):\n        self.iterator = iterator\n        self.close_callbacks = makelist(close)\n    def __iter__(self):\n        return iter(self.iterator)\n    def close(self):\n        for func in self.close_callbacks:",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "ResourceManager",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class ResourceManager(object):\n    ''' This class manages a list of search paths and helps to find and open\n        application-bound resources (files).\n        :param base: default value for :meth:`add_path` calls.\n        :param opener: callable used to open resources.\n        :param cachemode: controls which lookups are cached. One of 'all',\n                         'found' or 'none'.\n    '''\n    def __init__(self, base='./', opener=open, cachemode='all'):\n        self.opener = open",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "FileUpload",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class FileUpload(object):\n    def __init__(self, fileobj, name, filename, headers=None):\n        ''' Wrapper for file uploads. '''\n        #: Open file(-like) object (BytesIO buffer or temporary file)\n        self.file = fileobj\n        #: Name of the upload form field\n        self.name = name\n        #: Raw filename as sent by the client (may contain unsafe characters)\n        self.raw_filename = filename\n        #: A :class:`HeaderDict` with additional headers (e.g. content-type)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "ServerAdapter",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class ServerAdapter(object):\n    quiet = False\n    def __init__(self, host='127.0.0.1', port=8080, **options):\n        self.options = options\n        self.host = host\n        self.port = int(port)\n    def run(self, handler): # pragma: no cover\n        pass\n    def __repr__(self):\n        args = ', '.join(['%s=%s'%(k,repr(v)) for k, v in self.options.items()])",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "CGIServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class CGIServer(ServerAdapter):\n    quiet = True\n    def run(self, handler): # pragma: no cover\n        from wsgiref.handlers import CGIHandler\n        def fixed_environ(environ, start_response):\n            environ.setdefault('PATH_INFO', '')\n            return handler(environ, start_response)\n        CGIHandler().run(fixed_environ)\nclass FlupFCGIServer(ServerAdapter):\n    def run(self, handler): # pragma: no cover",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "FlupFCGIServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class FlupFCGIServer(ServerAdapter):\n    def run(self, handler): # pragma: no cover\n        import flup.server.fcgi\n        self.options.setdefault('bindAddress', (self.host, self.port))\n        flup.server.fcgi.WSGIServer(handler, **self.options).run()\nclass WSGIRefServer(ServerAdapter):\n    def run(self, app): # pragma: no cover\n        from wsgiref.simple_server import WSGIRequestHandler, WSGIServer\n        from wsgiref.simple_server import make_server\n        import socket",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "WSGIRefServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class WSGIRefServer(ServerAdapter):\n    def run(self, app): # pragma: no cover\n        from wsgiref.simple_server import WSGIRequestHandler, WSGIServer\n        from wsgiref.simple_server import make_server\n        import socket\n        class FixedHandler(WSGIRequestHandler):\n            def address_string(self): # Prevent reverse DNS lookups please.\n                return self.client_address[0]\n            def log_request(*args, **kw):\n                if not self.quiet:",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "CherryPyServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class CherryPyServer(ServerAdapter):\n    def run(self, handler): # pragma: no cover\n        depr(\"The wsgi server part of cherrypy was split into a new \"\n             \"project called 'cheroot'. Use the 'cheroot' server \"\n             \"adapter instead of cherrypy.\")\n        from cherrypy import wsgiserver # This will fail for CherryPy >= 9\n        self.options['bind_addr'] = (self.host, self.port)\n        self.options['wsgi_app'] = handler\n        certfile = self.options.get('certfile')\n        if certfile:",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "CherootServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class CherootServer(ServerAdapter):\n    def run(self, handler): # pragma: no cover\n        from cheroot import wsgi\n        from cheroot.ssl import builtin\n        self.options['bind_addr'] = (self.host, self.port)\n        self.options['wsgi_app'] = handler\n        certfile = self.options.pop('certfile', None)\n        keyfile = self.options.pop('keyfile', None)\n        chainfile = self.options.pop('chainfile', None)\n        server = wsgi.Server(**self.options)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "WaitressServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class WaitressServer(ServerAdapter):\n    def run(self, handler):\n        from waitress import serve\n        serve(handler, host=self.host, port=self.port)\nclass PasteServer(ServerAdapter):\n    def run(self, handler): # pragma: no cover\n        from paste import httpserver\n        from paste.translogger import TransLogger\n        handler = TransLogger(handler, setup_console_handler=(not self.quiet))\n        httpserver.serve(handler, host=self.host, port=str(self.port),",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "PasteServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class PasteServer(ServerAdapter):\n    def run(self, handler): # pragma: no cover\n        from paste import httpserver\n        from paste.translogger import TransLogger\n        handler = TransLogger(handler, setup_console_handler=(not self.quiet))\n        httpserver.serve(handler, host=self.host, port=str(self.port),\n                         **self.options)\nclass MeinheldServer(ServerAdapter):\n    def run(self, handler):\n        from meinheld import server",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "MeinheldServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class MeinheldServer(ServerAdapter):\n    def run(self, handler):\n        from meinheld import server\n        server.listen((self.host, self.port))\n        server.run(handler)\nclass FapwsServer(ServerAdapter):\n    \"\"\" Extremely fast webserver using libev. See https://github.com/william-os4y/fapws3 \"\"\"\n    def run(self, handler): # pragma: no cover\n        import fapws._evwsgi as evwsgi\n        from fapws import base, config",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "FapwsServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class FapwsServer(ServerAdapter):\n    \"\"\" Extremely fast webserver using libev. See https://github.com/william-os4y/fapws3 \"\"\"\n    def run(self, handler): # pragma: no cover\n        import fapws._evwsgi as evwsgi\n        from fapws import base, config\n        port = self.port\n        if float(config.SERVER_IDENT[-2:]) > 0.4:\n            # fapws3 silently changed its API in 0.5\n            port = str(port)\n        evwsgi.start(self.host, port)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "TornadoServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class TornadoServer(ServerAdapter):\n    \"\"\" The super hyped asynchronous server by facebook. Untested. \"\"\"\n    def run(self, handler): # pragma: no cover\n        import tornado.wsgi, tornado.httpserver, tornado.ioloop\n        container = tornado.wsgi.WSGIContainer(handler)\n        server = tornado.httpserver.HTTPServer(container)\n        server.listen(port=self.port,address=self.host)\n        tornado.ioloop.IOLoop.instance().start()\nclass AppEngineServer(ServerAdapter):\n    \"\"\" Adapter for Google App Engine. \"\"\"",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "AppEngineServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class AppEngineServer(ServerAdapter):\n    \"\"\" Adapter for Google App Engine. \"\"\"\n    quiet = True\n    def run(self, handler):\n        from google.appengine.ext.webapp import util\n        # A main() function in the handler script enables 'App Caching'.\n        # Lets makes sure it is there. This _really_ improves performance.\n        module = sys.modules.get('__main__')\n        if module and not hasattr(module, 'main'):\n            module.main = lambda: util.run_wsgi_app(handler)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "TwistedServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class TwistedServer(ServerAdapter):\n    \"\"\" Untested. \"\"\"\n    def run(self, handler):\n        from twisted.web import server, wsgi\n        from twisted.python.threadpool import ThreadPool\n        from twisted.internet import reactor\n        thread_pool = ThreadPool()\n        thread_pool.start()\n        reactor.addSystemEventTrigger('after', 'shutdown', thread_pool.stop)\n        factory = server.Site(wsgi.WSGIResource(reactor, thread_pool, handler))",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "DieselServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class DieselServer(ServerAdapter):\n    \"\"\" Untested. \"\"\"\n    def run(self, handler):\n        from diesel.protocols.wsgi import WSGIApplication\n        app = WSGIApplication(handler, port=self.port)\n        app.run()\nclass GeventServer(ServerAdapter):\n    \"\"\" Untested. Options:\n        * `fast` (default: False) uses libevent's http server, but has some\n          issues: No streaming, no pipelining, no SSL.",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "GeventServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class GeventServer(ServerAdapter):\n    \"\"\" Untested. Options:\n        * `fast` (default: False) uses libevent's http server, but has some\n          issues: No streaming, no pipelining, no SSL.\n        * See gevent.wsgi.WSGIServer() documentation for more options.\n    \"\"\"\n    def run(self, handler):\n        from gevent import pywsgi, local\n        if not isinstance(threading.local(), local.local):\n            msg = \"Bottle requires gevent.monkey.patch_all() (before import)\"",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "GeventSocketIOServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class GeventSocketIOServer(ServerAdapter):\n    def run(self,handler):\n        from socketio import server\n        address = (self.host, self.port)\n        server.SocketIOServer(address, handler, **self.options).serve_forever()\nclass GunicornServer(ServerAdapter):\n    \"\"\" Untested. See http://gunicorn.org/configure.html for options. \"\"\"\n    def run(self, handler):\n        from gunicorn.app.base import Application\n        config = {'bind': \"%s:%d\" % (self.host, int(self.port))}",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "GunicornServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class GunicornServer(ServerAdapter):\n    \"\"\" Untested. See http://gunicorn.org/configure.html for options. \"\"\"\n    def run(self, handler):\n        from gunicorn.app.base import Application\n        config = {'bind': \"%s:%d\" % (self.host, int(self.port))}\n        config.update(self.options)\n        class GunicornApplication(Application):\n            def init(self, parser, opts, args):\n                return config\n            def load(self):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "EventletServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class EventletServer(ServerAdapter):\n    \"\"\" Untested \"\"\"\n    def run(self, handler):\n        from eventlet import wsgi, listen\n        try:\n            wsgi.server(listen((self.host, self.port)), handler,\n                        log_output=(not self.quiet))\n        except TypeError:\n            # Fallback, if we have old version of eventlet\n            wsgi.server(listen((self.host, self.port)), handler)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "RocketServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class RocketServer(ServerAdapter):\n    \"\"\" Untested. \"\"\"\n    def run(self, handler):\n        from rocket import Rocket\n        server = Rocket((self.host, self.port), 'wsgi', { 'wsgi_app' : handler })\n        server.start()\nclass BjoernServer(ServerAdapter):\n    \"\"\" Fast server written in C: https://github.com/jonashaag/bjoern \"\"\"\n    def run(self, handler):\n        from bjoern import run",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "BjoernServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class BjoernServer(ServerAdapter):\n    \"\"\" Fast server written in C: https://github.com/jonashaag/bjoern \"\"\"\n    def run(self, handler):\n        from bjoern import run\n        run(handler, self.host, self.port)\nclass AutoServer(ServerAdapter):\n    \"\"\" Untested. \"\"\"\n    adapters = [WaitressServer, PasteServer, TwistedServer, CherryPyServer,\n                CherootServer, WSGIRefServer]\n    def run(self, handler):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "AutoServer",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class AutoServer(ServerAdapter):\n    \"\"\" Untested. \"\"\"\n    adapters = [WaitressServer, PasteServer, TwistedServer, CherryPyServer,\n                CherootServer, WSGIRefServer]\n    def run(self, handler):\n        for sa in self.adapters:\n            try:\n                return sa(self.host, self.port, **self.options).run(handler)\n            except ImportError:\n                pass",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "FileCheckerThread",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class FileCheckerThread(threading.Thread):\n    ''' Interrupt main-thread as soon as a changed module file is detected,\n        the lockfile gets deleted or gets to old. '''\n    def __init__(self, lockfile, interval):\n        threading.Thread.__init__(self)\n        self.lockfile, self.interval = lockfile, interval\n        #: Is one of 'reload', 'error' or 'exit'\n        self.status = None\n    def run(self):\n        exists = os.path.exists",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "TemplateError",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class TemplateError(HTTPError):\n    def __init__(self, message):\n        HTTPError.__init__(self, 500, message)\nclass BaseTemplate(object):\n    \"\"\" Base class and minimal API for template adapters \"\"\"\n    extensions = ['tpl','html','thtml','stpl']\n    settings = {} #used in prepare()\n    defaults = {} #used in render()\n    def __init__(self, source=None, name=None, lookup=[], encoding='utf8', **settings):\n        \"\"\" Create a new template.",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "BaseTemplate",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class BaseTemplate(object):\n    \"\"\" Base class and minimal API for template adapters \"\"\"\n    extensions = ['tpl','html','thtml','stpl']\n    settings = {} #used in prepare()\n    defaults = {} #used in render()\n    def __init__(self, source=None, name=None, lookup=[], encoding='utf8', **settings):\n        \"\"\" Create a new template.\n        If the source parameter (str or buffer) is missing, the name argument\n        is used to guess a template filename. Subclasses can assume that\n        self.source and/or self.filename are set. Both are strings.",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "MakoTemplate",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class MakoTemplate(BaseTemplate):\n    def prepare(self, **options):\n        from mako.template import Template\n        from mako.lookup import TemplateLookup\n        options.update({'input_encoding':self.encoding})\n        options.setdefault('format_exceptions', bool(DEBUG))\n        lookup = TemplateLookup(directories=self.lookup, **options)\n        if self.source:\n            self.tpl = Template(self.source, lookup=lookup, **options)\n        else:",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "CheetahTemplate",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class CheetahTemplate(BaseTemplate):\n    def prepare(self, **options):\n        from Cheetah.Template import Template\n        self.context = threading.local()\n        self.context.vars = {}\n        options['searchList'] = [self.context.vars]\n        if self.source:\n            self.tpl = Template(source=self.source, **options)\n        else:\n            self.tpl = Template(file=self.filename, **options)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Jinja2Template",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class Jinja2Template(BaseTemplate):\n    def prepare(self, filters=None, tests=None, globals={}, **kwargs):\n        from jinja2 import Environment, FunctionLoader\n        if 'prefix' in kwargs: # TODO: to be removed after a while\n            raise RuntimeError('The keyword argument `prefix` has been removed. '\n                'Use the full jinja2 environment name line_statement_prefix instead.')\n        self.env = Environment(loader=FunctionLoader(self.loader), **kwargs)\n        if filters: self.env.filters.update(filters)\n        if tests: self.env.tests.update(tests)\n        if globals: self.env.globals.update(globals)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "SimpleTemplate",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class SimpleTemplate(BaseTemplate):\n    def prepare(self, escape_func=html_escape, noescape=False, syntax=None, **ka):\n        self.cache = {}\n        enc = self.encoding\n        self._str = lambda x: touni(x, enc)\n        self._escape = lambda x: escape_func(touni(x, enc))\n        self.syntax = syntax\n        if noescape:\n            self._str, self._escape = self._escape, self._str\n    @cached_property",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "StplSyntaxError",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class StplSyntaxError(TemplateError): pass\nclass StplParser(object):\n    ''' Parser for stpl templates. '''\n    _re_cache = {} #: Cache for compiled re patterns\n    # This huge pile of voodoo magic splits python code into 8 different tokens.\n    # 1: All kinds of python strings (trust me, it works)\n    _re_tok = '([urbURB]?(?:\\'\\'(?!\\')|\"\"(?!\")|\\'{6}|\"{6}' \\\n               '|\\'(?:[^\\\\\\\\\\']|\\\\\\\\.)+?\\'|\"(?:[^\\\\\\\\\"]|\\\\\\\\.)+?\"' \\\n               '|\\'{3}(?:[^\\\\\\\\]|\\\\\\\\.|\\\\n)+?\\'{3}' \\\n               '|\"{3}(?:[^\\\\\\\\]|\\\\\\\\.|\\\\n)+?\"{3}))'",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "StplParser",
        "kind": 6,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "class StplParser(object):\n    ''' Parser for stpl templates. '''\n    _re_cache = {} #: Cache for compiled re patterns\n    # This huge pile of voodoo magic splits python code into 8 different tokens.\n    # 1: All kinds of python strings (trust me, it works)\n    _re_tok = '([urbURB]?(?:\\'\\'(?!\\')|\"\"(?!\")|\\'{6}|\"{6}' \\\n               '|\\'(?:[^\\\\\\\\\\']|\\\\\\\\.)+?\\'|\"(?:[^\\\\\\\\\"]|\\\\\\\\.)+?\"' \\\n               '|\\'{3}(?:[^\\\\\\\\]|\\\\\\\\.|\\\\n)+?\\'{3}' \\\n               '|\"{3}(?:[^\\\\\\\\]|\\\\\\\\.|\\\\n)+?\"{3}))'\n    _re_inl = _re_tok.replace('|\\\\n','') # We re-use this string pattern later",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "tob",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def tob(s, enc='utf8'):\n    return s.encode(enc) if isinstance(s, unicode) else bytes(s)\ndef touni(s, enc='utf8', err='strict'):\n    return s.decode(enc, err) if isinstance(s, bytes) else unicode(s)\ntonat = touni if py3k else tob\n# 3.2 fixes cgi.FieldStorage to accept bytes (which makes a lot of sense).\n# 3.1 needs a workaround.\nif py31:\n    from io import TextIOWrapper\n    class NCTextIOWrapper(TextIOWrapper):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "touni",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def touni(s, enc='utf8', err='strict'):\n    return s.decode(enc, err) if isinstance(s, bytes) else unicode(s)\ntonat = touni if py3k else tob\n# 3.2 fixes cgi.FieldStorage to accept bytes (which makes a lot of sense).\n# 3.1 needs a workaround.\nif py31:\n    from io import TextIOWrapper\n    class NCTextIOWrapper(TextIOWrapper):\n        def close(self): pass # Keep wrapped buffer open.\n# A bug in functools causes it to break if the wrapper is an instance method",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "update_wrapper",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def update_wrapper(wrapper, wrapped, *a, **ka):\n    try: functools.update_wrapper(wrapper, wrapped, *a, **ka)\n    except AttributeError: pass\n# These helpers are used at module level and need to be defined first.\n# And yes, I know PEP-8, but sometimes a lower-case classname makes more sense.\ndef depr(message, hard=False):\n    warnings.warn(message, DeprecationWarning, stacklevel=3)\ndef makelist(data): # This is just to handy\n    if isinstance(data, (tuple, list, set, dict)): return list(data)\n    elif data: return [data]",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "depr",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def depr(message, hard=False):\n    warnings.warn(message, DeprecationWarning, stacklevel=3)\ndef makelist(data): # This is just to handy\n    if isinstance(data, (tuple, list, set, dict)): return list(data)\n    elif data: return [data]\n    else: return []\nclass DictProperty(object):\n    ''' Property that maps to a key in a local dict-like attribute. '''\n    def __init__(self, attr, key=None, read_only=False):\n        self.attr, self.key, self.read_only = attr, key, read_only",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "makelist",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def makelist(data): # This is just to handy\n    if isinstance(data, (tuple, list, set, dict)): return list(data)\n    elif data: return [data]\n    else: return []\nclass DictProperty(object):\n    ''' Property that maps to a key in a local dict-like attribute. '''\n    def __init__(self, attr, key=None, read_only=False):\n        self.attr, self.key, self.read_only = attr, key, read_only\n    def __call__(self, func):\n        functools.update_wrapper(self, func, updated=[])",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "local_property",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def local_property(name=None):\n    if name: depr('local_property() is deprecated and will be removed.') #0.12\n    ls = threading.local()\n    def fget(self):\n        try: return ls.var\n        except AttributeError:\n            raise RuntimeError(\"Request context not initialized.\")\n    def fset(self, value): ls.var = value\n    def fdel(self): del ls.var\n    return property(fget, fset, fdel, 'Thread-local property')",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "abort",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def abort(code=500, text='Unknown Error.'):\n    \"\"\" Aborts execution and causes a HTTP error. \"\"\"\n    raise HTTPError(code, text)\ndef redirect(url, code=None):\n    \"\"\" Aborts execution and causes a 303 or 302 redirect, depending on\n        the HTTP protocol version. \"\"\"\n    if not code:\n        code = 303 if request.get('SERVER_PROTOCOL') == \"HTTP/1.1\" else 302\n    res = response.copy(cls=HTTPResponse)\n    res.status = code",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "redirect",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def redirect(url, code=None):\n    \"\"\" Aborts execution and causes a 303 or 302 redirect, depending on\n        the HTTP protocol version. \"\"\"\n    if not code:\n        code = 303 if request.get('SERVER_PROTOCOL') == \"HTTP/1.1\" else 302\n    res = response.copy(cls=HTTPResponse)\n    res.status = code\n    res.body = \"\"\n    res.set_header('Location', urljoin(request.url, url))\n    raise res",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "static_file",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def static_file(filename, root, mimetype='auto', download=False, charset='UTF-8'):\n    \"\"\" Open a file in a safe way and return :exc:`HTTPResponse` with status\n        code 200, 305, 403 or 404. The ``Content-Type``, ``Content-Encoding``,\n        ``Content-Length`` and ``Last-Modified`` headers are set if possible.\n        Special support for ``If-Modified-Since``, ``Range`` and ``HEAD``\n        requests.\n        :param filename: Name or path of the file to send.\n        :param root: Root path for file lookups. Should be an absolute directory\n            path.\n        :param mimetype: Defines the content-type header (default: guess from",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "debug",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def debug(mode=True):\n    \"\"\" Change the debug level.\n    There is only one debug level supported at the moment.\"\"\"\n    global DEBUG\n    if mode: warnings.simplefilter('default')\n    DEBUG = bool(mode)\ndef http_date(value):\n    if isinstance(value, (datedate, datetime)):\n        value = value.utctimetuple()\n    elif isinstance(value, (int, float)):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "http_date",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def http_date(value):\n    if isinstance(value, (datedate, datetime)):\n        value = value.utctimetuple()\n    elif isinstance(value, (int, float)):\n        value = time.gmtime(value)\n    if not isinstance(value, basestring):\n        value = time.strftime(\"%a, %d %b %Y %H:%M:%S GMT\", value)\n    return value\ndef parse_date(ims):\n    \"\"\" Parse rfc1123, rfc850 and asctime timestamps and return UTC epoch. \"\"\"",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "parse_date",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def parse_date(ims):\n    \"\"\" Parse rfc1123, rfc850 and asctime timestamps and return UTC epoch. \"\"\"\n    try:\n        ts = email.utils.parsedate_tz(ims)\n        return time.mktime(ts[:8] + (0,)) - (ts[9] or 0) - time.timezone\n    except (TypeError, ValueError, IndexError, OverflowError):\n        return None\ndef parse_auth(header):\n    \"\"\" Parse rfc2617 HTTP authentication header string (basic) and return (user,pass) tuple or None\"\"\"\n    try:",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "parse_auth",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def parse_auth(header):\n    \"\"\" Parse rfc2617 HTTP authentication header string (basic) and return (user,pass) tuple or None\"\"\"\n    try:\n        method, data = header.split(None, 1)\n        if method.lower() == 'basic':\n            user, pwd = touni(base64.b64decode(tob(data))).split(':',1)\n            return user, pwd\n    except (KeyError, ValueError):\n        return None\ndef parse_range_header(header, maxlen=0):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "parse_range_header",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def parse_range_header(header, maxlen=0):\n    ''' Yield (start, end) ranges parsed from a HTTP Range header. Skip\n        unsatisfiable ranges. The end index is non-inclusive.'''\n    if not header or header[:6] != 'bytes=': return\n    ranges = [r.split('-', 1) for r in header[6:].split(',') if '-' in r]\n    for start, end in ranges:\n        try:\n            if not start:  # bytes=-100    -> last 100 bytes\n                start, end = max(0, maxlen-int(end)), maxlen\n            elif not end:  # bytes=100-    -> all but the first 99 bytes",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "cookie_encode",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def cookie_encode(data, key):\n    ''' Encode and sign a pickle-able object. Return a (byte) string '''\n    msg = base64.b64encode(pickle.dumps(data, -1))\n    sig = base64.b64encode(hmac.new(tob(key), msg, digestmod=hashlib.md5).digest())\n    return tob('!') + sig + tob('?') + msg\ndef cookie_decode(data, key):\n    ''' Verify and decode an encoded string. Return an object or None.'''\n    data = tob(data)\n    if cookie_is_encoded(data):\n        sig, msg = data.split(tob('?'), 1)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "cookie_decode",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def cookie_decode(data, key):\n    ''' Verify and decode an encoded string. Return an object or None.'''\n    data = tob(data)\n    if cookie_is_encoded(data):\n        sig, msg = data.split(tob('?'), 1)\n        if _lscmp(sig[1:], base64.b64encode(hmac.new(tob(key), msg, digestmod=hashlib.md5).digest())):\n            return pickle.loads(base64.b64decode(msg))\n    return None\ndef cookie_is_encoded(data):\n    ''' Return True if the argument looks like a encoded cookie.'''",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "cookie_is_encoded",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def cookie_is_encoded(data):\n    ''' Return True if the argument looks like a encoded cookie.'''\n    return bool(data.startswith(tob('!')) and tob('?') in data)\ndef html_escape(string):\n    ''' Escape HTML special characters ``&<>`` and quotes ``'\"``. '''\n    return string.replace('&','&amp;').replace('<','&lt;').replace('>','&gt;')\\\n                 .replace('\"','&quot;').replace(\"'\",'&#039;')\ndef html_quote(string):\n    ''' Escape and quote a string to be used as an HTTP attribute.'''\n    return '\"%s\"' % html_escape(string).replace('\\n','&#10;')\\",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "html_escape",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def html_escape(string):\n    ''' Escape HTML special characters ``&<>`` and quotes ``'\"``. '''\n    return string.replace('&','&amp;').replace('<','&lt;').replace('>','&gt;')\\\n                 .replace('\"','&quot;').replace(\"'\",'&#039;')\ndef html_quote(string):\n    ''' Escape and quote a string to be used as an HTTP attribute.'''\n    return '\"%s\"' % html_escape(string).replace('\\n','&#10;')\\\n                    .replace('\\r','&#13;').replace('\\t','&#9;')\ndef yieldroutes(func):\n    \"\"\" Return a generator for routes that match the signature (name, args)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "html_quote",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def html_quote(string):\n    ''' Escape and quote a string to be used as an HTTP attribute.'''\n    return '\"%s\"' % html_escape(string).replace('\\n','&#10;')\\\n                    .replace('\\r','&#13;').replace('\\t','&#9;')\ndef yieldroutes(func):\n    \"\"\" Return a generator for routes that match the signature (name, args)\n    of the func parameter. This may yield more than one route if the function\n    takes optional keyword arguments. The output is best described by example::\n        a()         -> '/a'\n        b(x, y)     -> '/b/<x>/<y>'",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "yieldroutes",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def yieldroutes(func):\n    \"\"\" Return a generator for routes that match the signature (name, args)\n    of the func parameter. This may yield more than one route if the function\n    takes optional keyword arguments. The output is best described by example::\n        a()         -> '/a'\n        b(x, y)     -> '/b/<x>/<y>'\n        c(x, y=5)   -> '/c/<x>' and '/c/<x>/<y>'\n        d(x=5, y=6) -> '/d' and '/d/<x>' and '/d/<x>/<y>'\n    \"\"\"\n    path = '/' + func.__name__.replace('__','/').lstrip('/')",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "path_shift",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def path_shift(script_name, path_info, shift=1):\n    ''' Shift path fragments from PATH_INFO to SCRIPT_NAME and vice versa.\n        :return: The modified paths.\n        :param script_name: The SCRIPT_NAME path.\n        :param script_name: The PATH_INFO path.\n        :param shift: The number of path fragments to shift. May be negative to\n          change the shift direction. (default: 1)\n    '''\n    if shift == 0: return script_name, path_info\n    pathlist = path_info.strip('/').split('/')",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "auth_basic",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def auth_basic(check, realm=\"private\", text=\"Access denied\"):\n    ''' Callback decorator to require HTTP auth (basic).\n        TODO: Add route(check_auth=...) parameter. '''\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*a, **ka):\n            user, password = request.auth or (None, None)\n            if user is None or not check(user, password):\n                err = HTTPError(401, text)\n                err.add_header('WWW-Authenticate', 'Basic realm=\"%s\"' % realm)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "make_default_app_wrapper",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def make_default_app_wrapper(name):\n    ''' Return a callable that relays calls to the current default app. '''\n    @functools.wraps(getattr(Bottle, name))\n    def wrapper(*a, **ka):\n        return getattr(app(), name)(*a, **ka)\n    return wrapper\nroute     = make_default_app_wrapper('route')\nget       = make_default_app_wrapper('get')\npost      = make_default_app_wrapper('post')\nput       = make_default_app_wrapper('put')",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "load",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def load(target, **namespace):\n    \"\"\" Import a module or fetch an object from a module.\n        * ``package.module`` returns `module` as a module object.\n        * ``pack.mod:name`` returns the module variable `name` from `pack.mod`.\n        * ``pack.mod:func()`` calls `pack.mod.func()` and returns the result.\n        The last form accepts not only function calls, but any type of\n        expression. Keyword arguments passed to this function are available as\n        local variables. Example: ``import_string('re:compile(x)', x='[a-z]')``\n    \"\"\"\n    module, target = target.split(\":\", 1) if ':' in target else (target, None)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "load_app",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def load_app(target):\n    \"\"\" Load a bottle application from a module and make sure that the import\n        does not affect the current default application, but returns a separate\n        application object. See :func:`load` for the target parameter. \"\"\"\n    global NORUN; NORUN, nr_old = True, NORUN\n    try:\n        tmp = default_app.push() # Create a new \"default application\"\n        rv = load(target) # Import the target module\n        return rv if callable(rv) else tmp\n    finally:",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def run(app=None, server='wsgiref', host='127.0.0.1', port=8080,\n        interval=1, reloader=False, quiet=False, plugins=None,\n        debug=None, **kargs):\n    \"\"\" Start a server instance. This method blocks until the server terminates.\n        :param app: WSGI application or target string supported by\n               :func:`load_app`. (default: :func:`default_app`)\n        :param server: Server adapter to use. See :data:`server_names` keys\n               for valid names or pass a :class:`ServerAdapter` subclass.\n               (default: `wsgiref`)\n        :param host: Server address to bind to. Pass ``0.0.0.0`` to listens on",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "template",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def template(*args, **kwargs):\n    '''\n    Get a rendered template as a string iterator.\n    You can use a name, a filename or a template string as first parameter.\n    Template rendering arguments can be passed as dictionaries\n    or directly (as keyword arguments).\n    '''\n    tpl = args[0] if args else None\n    adapter = kwargs.pop('template_adapter', SimpleTemplate)\n    lookup = kwargs.pop('template_lookup', TEMPLATE_PATH)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "view",
        "kind": 2,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "def view(tpl_name, **defaults):\n    ''' Decorator: renders a template for a handler.\n        The handler can control its behavior like that:\n          - return a dict of template vars to fill out the template\n          - return something other than a dict and the view decorator will not\n            process the template, but return the handler result as is.\n            This includes returning a HTTPResponse(dict) to get,\n            for instance, JSON with autojson or other castfilters.\n    '''\n    def decorator(func):",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "__author__ = 'Marcel Hellkamp'\n__version__ = '0.12.25'\n__license__ = 'MIT'\n# The gevent server adapter needs to patch some modules before they are imported\n# This is why we parse the commandline parameters here but handle them later\nif __name__ == '__main__':\n    from optparse import OptionParser\n    _cmd_parser = OptionParser(usage=\"usage: %prog [options] package.module:app\")\n    _opt = _cmd_parser.add_option\n    _opt(\"--version\", action=\"store_true\", help=\"show version number.\")",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "__version__ = '0.12.25'\n__license__ = 'MIT'\n# The gevent server adapter needs to patch some modules before they are imported\n# This is why we parse the commandline parameters here but handle them later\nif __name__ == '__main__':\n    from optparse import OptionParser\n    _cmd_parser = OptionParser(usage=\"usage: %prog [options] package.module:app\")\n    _opt = _cmd_parser.add_option\n    _opt(\"--version\", action=\"store_true\", help=\"show version number.\")\n    _opt(\"-b\", \"--bind\", metavar=\"ADDRESS\", help=\"bind socket to ADDRESS.\")",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "__license__",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "__license__ = 'MIT'\n# The gevent server adapter needs to patch some modules before they are imported\n# This is why we parse the commandline parameters here but handle them later\nif __name__ == '__main__':\n    from optparse import OptionParser\n    _cmd_parser = OptionParser(usage=\"usage: %prog [options] package.module:app\")\n    _opt = _cmd_parser.add_option\n    _opt(\"--version\", action=\"store_true\", help=\"show version number.\")\n    _opt(\"-b\", \"--bind\", metavar=\"ADDRESS\", help=\"bind socket to ADDRESS.\")\n    _opt(\"-s\", \"--server\", default='wsgiref', help=\"use SERVER as backend.\")",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "py3k",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "py3k = py >= (3, 0, 0)\npy25 = py <  (2, 6, 0)\npy31 = (3, 1, 0) <= py < (3, 2, 0)\n# Workaround for the missing \"as\" keyword in py3k.\ndef _e(): return sys.exc_info()[1]\n# Workaround for the \"print is a keyword/function\" Python 2/3 dilemma\n# and a fallback for mod_wsgi (resticts stdout/err attribute access)\ntry:\n    _stdout, _stderr = sys.stdout.write, sys.stderr.write\nexcept IOError:",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "py25",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "py25 = py <  (2, 6, 0)\npy31 = (3, 1, 0) <= py < (3, 2, 0)\n# Workaround for the missing \"as\" keyword in py3k.\ndef _e(): return sys.exc_info()[1]\n# Workaround for the \"print is a keyword/function\" Python 2/3 dilemma\n# and a fallback for mod_wsgi (resticts stdout/err attribute access)\ntry:\n    _stdout, _stderr = sys.stdout.write, sys.stderr.write\nexcept IOError:\n    _stdout = lambda x: sys.stdout.write(x)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "py31",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "py31 = (3, 1, 0) <= py < (3, 2, 0)\n# Workaround for the missing \"as\" keyword in py3k.\ndef _e(): return sys.exc_info()[1]\n# Workaround for the \"print is a keyword/function\" Python 2/3 dilemma\n# and a fallback for mod_wsgi (resticts stdout/err attribute access)\ntry:\n    _stdout, _stderr = sys.stdout.write, sys.stderr.write\nexcept IOError:\n    _stdout = lambda x: sys.stdout.write(x)\n    _stderr = lambda x: sys.stderr.write(x)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "tonat",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "tonat = touni if py3k else tob\n# 3.2 fixes cgi.FieldStorage to accept bytes (which makes a lot of sense).\n# 3.1 needs a workaround.\nif py31:\n    from io import TextIOWrapper\n    class NCTextIOWrapper(TextIOWrapper):\n        def close(self): pass # Keep wrapped buffer open.\n# A bug in functools causes it to break if the wrapper is an instance method\ndef update_wrapper(wrapper, wrapped, *a, **ka):\n    try: functools.update_wrapper(wrapper, wrapped, *a, **ka)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Request",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "Request = BaseRequest\nResponse = BaseResponse\nclass HTTPResponse(Response, BottleException):\n    def __init__(self, body='', status=None, headers=None, **more_headers):\n        super(HTTPResponse, self).__init__(body, status, headers, **more_headers)\n    def apply(self, response):\n        response._status_code = self._status_code\n        response._status_line = self._status_line\n        response._headers = self._headers\n        response._cookies = self._cookies",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Response",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "Response = BaseResponse\nclass HTTPResponse(Response, BottleException):\n    def __init__(self, body='', status=None, headers=None, **more_headers):\n        super(HTTPResponse, self).__init__(body, status, headers, **more_headers)\n    def apply(self, response):\n        response._status_code = self._status_code\n        response._status_line = self._status_line\n        response._headers = self._headers\n        response._cookies = self._cookies\n        response.body = self.body",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "uninstall = make_default_app_wrapper('uninstall')\nurl       = make_default_app_wrapper('get_url')\n###############################################################################\n# Server Adapter ###############################################################\n###############################################################################\nclass ServerAdapter(object):\n    quiet = False\n    def __init__(self, host='127.0.0.1', port=8080, **options):\n        self.options = options\n        self.host = host",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "server_names",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "server_names = {\n    'cgi': CGIServer,\n    'flup': FlupFCGIServer,\n    'wsgiref': WSGIRefServer,\n    'waitress': WaitressServer,\n    'cherrypy': CherryPyServer,\n    'cheroot': CherootServer,\n    'paste': PasteServer,\n    'fapws3': FapwsServer,\n    'tornado': TornadoServer,",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_debug",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "_debug = debug\ndef run(app=None, server='wsgiref', host='127.0.0.1', port=8080,\n        interval=1, reloader=False, quiet=False, plugins=None,\n        debug=None, **kargs):\n    \"\"\" Start a server instance. This method blocks until the server terminates.\n        :param app: WSGI application or target string supported by\n               :func:`load_app`. (default: :func:`default_app`)\n        :param server: Server adapter to use. See :data:`server_names` keys\n               for valid names or pass a :class:`ServerAdapter` subclass.\n               (default: `wsgiref`)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "mako_template",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "mako_template = functools.partial(template, template_adapter=MakoTemplate)\ncheetah_template = functools.partial(template, template_adapter=CheetahTemplate)\njinja2_template = functools.partial(template, template_adapter=Jinja2Template)\ndef view(tpl_name, **defaults):\n    ''' Decorator: renders a template for a handler.\n        The handler can control its behavior like that:\n          - return a dict of template vars to fill out the template\n          - return something other than a dict and the view decorator will not\n            process the template, but return the handler result as is.\n            This includes returning a HTTPResponse(dict) to get,",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "cheetah_template",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "cheetah_template = functools.partial(template, template_adapter=CheetahTemplate)\njinja2_template = functools.partial(template, template_adapter=Jinja2Template)\ndef view(tpl_name, **defaults):\n    ''' Decorator: renders a template for a handler.\n        The handler can control its behavior like that:\n          - return a dict of template vars to fill out the template\n          - return something other than a dict and the view decorator will not\n            process the template, but return the handler result as is.\n            This includes returning a HTTPResponse(dict) to get,\n            for instance, JSON with autojson or other castfilters.",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "jinja2_template",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "jinja2_template = functools.partial(template, template_adapter=Jinja2Template)\ndef view(tpl_name, **defaults):\n    ''' Decorator: renders a template for a handler.\n        The handler can control its behavior like that:\n          - return a dict of template vars to fill out the template\n          - return something other than a dict and the view decorator will not\n            process the template, but return the handler result as is.\n            This includes returning a HTTPResponse(dict) to get,\n            for instance, JSON with autojson or other castfilters.\n    '''",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "mako_view",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "mako_view = functools.partial(view, template_adapter=MakoTemplate)\ncheetah_view = functools.partial(view, template_adapter=CheetahTemplate)\njinja2_view = functools.partial(view, template_adapter=Jinja2Template)\n###############################################################################\n# Constants and Globals ########################################################\n###############################################################################\nTEMPLATE_PATH = ['./', './views/']\nTEMPLATES = {}\nDEBUG = False\nNORUN = False # If set, run() does nothing. Used by load_app()",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "cheetah_view",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "cheetah_view = functools.partial(view, template_adapter=CheetahTemplate)\njinja2_view = functools.partial(view, template_adapter=Jinja2Template)\n###############################################################################\n# Constants and Globals ########################################################\n###############################################################################\nTEMPLATE_PATH = ['./', './views/']\nTEMPLATES = {}\nDEBUG = False\nNORUN = False # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "jinja2_view",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "jinja2_view = functools.partial(view, template_adapter=Jinja2Template)\n###############################################################################\n# Constants and Globals ########################################################\n###############################################################################\nTEMPLATE_PATH = ['./', './views/']\nTEMPLATES = {}\nDEBUG = False\nNORUN = False # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')\nHTTP_CODES = httplib.responses",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "TEMPLATE_PATH",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "TEMPLATE_PATH = ['./', './views/']\nTEMPLATES = {}\nDEBUG = False\nNORUN = False # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')\nHTTP_CODES = httplib.responses\nHTTP_CODES[418] = \"I'm a teapot\" # RFC 2324\nHTTP_CODES[422] = \"Unprocessable Entity\" # RFC 4918\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "TEMPLATES = {}\nDEBUG = False\nNORUN = False # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')\nHTTP_CODES = httplib.responses\nHTTP_CODES[418] = \"I'm a teapot\" # RFC 2324\nHTTP_CODES[422] = \"Unprocessable Entity\" # RFC 4918\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "DEBUG = False\nNORUN = False # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')\nHTTP_CODES = httplib.responses\nHTTP_CODES[418] = \"I'm a teapot\" # RFC 2324\nHTTP_CODES[422] = \"Unprocessable Entity\" # RFC 4918\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[511] = \"Network Authentication Required\"",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "NORUN",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "NORUN = False # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')\nHTTP_CODES = httplib.responses\nHTTP_CODES[418] = \"I'm a teapot\" # RFC 2324\nHTTP_CODES[422] = \"Unprocessable Entity\" # RFC 4918\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s'%(k,v)) for (k,v) in HTTP_CODES.items())",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES = httplib.responses\nHTTP_CODES[418] = \"I'm a teapot\" # RFC 2324\nHTTP_CODES[422] = \"Unprocessable Entity\" # RFC 4918\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s'%(k,v)) for (k,v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[418]",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES[418] = \"I'm a teapot\" # RFC 2324\nHTTP_CODES[422] = \"Unprocessable Entity\" # RFC 4918\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s'%(k,v)) for (k,v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[422]",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES[422] = \"Unprocessable Entity\" # RFC 4918\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s'%(k,v)) for (k,v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, HTTP_CODES, request, touni",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[428]",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s'%(k,v)) for (k,v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, HTTP_CODES, request, touni\n    <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[429]",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s'%(k,v)) for (k,v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, HTTP_CODES, request, touni\n    <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n    <html>",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[431]",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s'%(k,v)) for (k,v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, HTTP_CODES, request, touni\n    <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n    <html>\n        <head>",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[511]",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "HTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s'%(k,v)) for (k,v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, HTTP_CODES, request, touni\n    <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n    <html>\n        <head>\n            <title>Error: {{e.status}}</title>",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "_HTTP_STATUS_LINES",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "_HTTP_STATUS_LINES = dict((k, '%d %s'%(k,v)) for (k,v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, HTTP_CODES, request, touni\n    <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n    <html>\n        <head>\n            <title>Error: {{e.status}}</title>\n            <style type=\"text/css\">",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "ERROR_PAGE_TEMPLATE",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "ERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, HTTP_CODES, request, touni\n    <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n    <html>\n        <head>\n            <title>Error: {{e.status}}</title>\n            <style type=\"text/css\">\n              html {background-color: #eee; font-family: sans;}\n              body {background-color: #fff; border: 1px solid #ddd;",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "request",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "request = LocalRequest()\n#: A thread-safe instance of :class:`LocalResponse`. It is used to change the\n#: HTTP response for the *current* request.\nresponse = LocalResponse()\n#: A thread-safe namespace. Not used by Bottle.\nlocal = threading.local()\n# Initialize app stack (create first empty Bottle app)\n# BC: 0.6.4 and needed for run()\napp = default_app = AppStack()\napp.push()",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "response = LocalResponse()\n#: A thread-safe namespace. Not used by Bottle.\nlocal = threading.local()\n# Initialize app stack (create first empty Bottle app)\n# BC: 0.6.4 and needed for run()\napp = default_app = AppStack()\napp.push()\n#: A virtual package that redirects import statements.\n#: Example: ``import bottle.ext.sqlite`` actually imports `bottle_sqlite`.\next = _ImportRedirect('bottle.ext' if __name__ == '__main__' else __name__+\".ext\", 'bottle_%s').module",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "local",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "local = threading.local()\n# Initialize app stack (create first empty Bottle app)\n# BC: 0.6.4 and needed for run()\napp = default_app = AppStack()\napp.push()\n#: A virtual package that redirects import statements.\n#: Example: ``import bottle.ext.sqlite`` actually imports `bottle_sqlite`.\next = _ImportRedirect('bottle.ext' if __name__ == '__main__' else __name__+\".ext\", 'bottle_%s').module\nif __name__ == '__main__':\n    opt, args, parser = _cmd_options, _cmd_args, _cmd_parser",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "app = default_app = AppStack()\napp.push()\n#: A virtual package that redirects import statements.\n#: Example: ``import bottle.ext.sqlite`` actually imports `bottle_sqlite`.\next = _ImportRedirect('bottle.ext' if __name__ == '__main__' else __name__+\".ext\", 'bottle_%s').module\nif __name__ == '__main__':\n    opt, args, parser = _cmd_options, _cmd_args, _cmd_parser\n    if opt.version:\n        _stdout('Bottle %s\\n'%__version__)\n        sys.exit(0)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "ext",
        "kind": 5,
        "importPath": "venv.Scripts.bottle",
        "description": "venv.Scripts.bottle",
        "peekOfCode": "ext = _ImportRedirect('bottle.ext' if __name__ == '__main__' else __name__+\".ext\", 'bottle_%s').module\nif __name__ == '__main__':\n    opt, args, parser = _cmd_options, _cmd_args, _cmd_parser\n    if opt.version:\n        _stdout('Bottle %s\\n'%__version__)\n        sys.exit(0)\n    if not args:\n        parser.print_help()\n        _stderr('\\nError: No application specified.\\n')\n        sys.exit(1)",
        "detail": "venv.Scripts.bottle",
        "documentation": {}
    },
    {
        "label": "Initialise",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def Initialise():\n  keyboard.press_and_release(\"win+up\")\n  print(\"Connected 🚀🚀🚀\")\n  Jarvis()\n#? Main function\n# @eel.expose\ndef Jarvis():\n  time.sleep(2)\n  eel.showMainWindow()\n  time.sleep(2)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Jarvis",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def Jarvis():\n  time.sleep(2)\n  eel.showMainWindow()\n  time.sleep(2)\n  eel.showWakeWindow()\n  time.sleep(2)\n  eel.showMainWindow()\n#? Main Execution\nif __name__ == '__main__': \n  try: eel.start(\"index.html\", mode='chrome', size=(1500, 1200)) ",
        "detail": "main",
        "documentation": {}
    }
]