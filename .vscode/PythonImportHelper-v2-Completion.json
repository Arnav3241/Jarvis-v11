[
    {
        "label": "google.generativeai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "google.generativeai",
        "description": "google.generativeai",
        "detail": "google.generativeai",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getcwd",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getcwd",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "mixer",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "mixer",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "pvporcupine",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pvporcupine",
        "description": "pvporcupine",
        "detail": "pvporcupine",
        "documentation": {}
    },
    {
        "label": "struct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct",
        "description": "struct",
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "pyaudio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyaudio",
        "description": "pyaudio",
        "detail": "pyaudio",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "keyboard",
        "description": "keyboard",
        "detail": "keyboard",
        "documentation": {}
    },
    {
        "label": "eel",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "eel",
        "description": "eel",
        "detail": "eel",
        "documentation": {}
    },
    {
        "label": "ollama",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ollama",
        "description": "ollama",
        "detail": "ollama",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "get",
        "importPath": "requests",
        "description": "requests",
        "isExtraImport": true,
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "playsound",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "playsound",
        "description": "playsound",
        "detail": "playsound",
        "documentation": {}
    },
    {
        "label": "playsound",
        "importPath": "playsound",
        "description": "playsound",
        "isExtraImport": true,
        "detail": "playsound",
        "documentation": {}
    },
    {
        "label": "playsound",
        "importPath": "playsound",
        "description": "playsound",
        "isExtraImport": true,
        "detail": "playsound",
        "documentation": {}
    },
    {
        "label": "playsound",
        "importPath": "playsound",
        "description": "playsound",
        "isExtraImport": true,
        "detail": "playsound",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Functions.Listen.listen",
        "description": "Functions.Listen.listen",
        "isExtraImport": true,
        "detail": "Functions.Listen.listen",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Interface.IF",
        "description": "Interface.IF",
        "isExtraImport": true,
        "detail": "Interface.IF",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Interface.IF",
        "description": "Interface.IF",
        "isExtraImport": true,
        "detail": "Interface.IF",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Global.vars",
        "description": "Global.vars",
        "isExtraImport": true,
        "detail": "Global.vars",
        "documentation": {}
    },
    {
        "label": "prompt",
        "kind": 5,
        "importPath": "Dataset_Gen.llm",
        "description": "Dataset_Gen.llm",
        "peekOfCode": "prompt = ''''\nyou are a intent classifier\nYour output should be in json in this form:\n{\n  \"user_intent\": \"The user's command\",\n  \"breakdown\": [\n    {\n      \"query\": \"1st Query: the part of the complete query that expresses this desiered intent and other related things from the query that might be helpful for getting the desired output\",\n      \"query_type\": [\"general\", \"scientific\", \"life\", \"math\", \"religious\", \"technological\", \"automation_query\", \"other\"],\n      \"dataset\": [\"realtime\", \"static\"],",
        "detail": "Dataset_Gen.llm",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "Dataset_Gen.llm",
        "description": "Dataset_Gen.llm",
        "peekOfCode": "model = genai.GenerativeModel('gemini-1.5-pro-latest')\nresponse = model.generate_content(prompt + '\"hello jarvis hows it going can you give me some tips for studying for exams also can you tell me what is the time today\"')\nprint(response.text)",
        "detail": "Dataset_Gen.llm",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Dataset_Gen.llm",
        "description": "Dataset_Gen.llm",
        "peekOfCode": "response = model.generate_content(prompt + '\"hello jarvis hows it going can you give me some tips for studying for exams also can you tell me what is the time today\"')\nprint(response.text)",
        "detail": "Dataset_Gen.llm",
        "documentation": {}
    },
    {
        "label": "Listen",
        "kind": 2,
        "importPath": "Functions.Listen.listen",
        "description": "Functions.Listen.listen",
        "peekOfCode": "def Listen():\n  driver.get(website)\n  driver.find_element(by=By.ID, value='start').click()\n  print(\"Listening ...\")\n  while True:\n    text = driver.find_element(by=By.ID, value='output').text\n    if text != \"\":\n      print(f\"You : {text}\")\n      driver.find_element(by=By.ID, value='end').click()\n      return text",
        "detail": "Functions.Listen.listen",
        "documentation": {}
    },
    {
        "label": "os.environ['WDM_LOG']",
        "kind": 5,
        "importPath": "Functions.Listen.listen",
        "description": "Functions.Listen.listen",
        "peekOfCode": "os.environ['WDM_LOG'] = '0'\nservice = Service(ChromeDriverManager().install())\nchrome_options = webdriver.ChromeOptions()\nchrome_options.add_argument(\"--use-fake-ui-for-media-stream\")\nchrome_options.add_argument(\"--headless=new\")\ndriver = webdriver.Chrome(service=service, options=chrome_options)\nwebsite = f\"{getcwd()}//Functions//Listen//Recognition//index.html\"\ndriver.get(website)\ndef Listen():\n  driver.get(website)",
        "detail": "Functions.Listen.listen",
        "documentation": {}
    },
    {
        "label": "service",
        "kind": 5,
        "importPath": "Functions.Listen.listen",
        "description": "Functions.Listen.listen",
        "peekOfCode": "service = Service(ChromeDriverManager().install())\nchrome_options = webdriver.ChromeOptions()\nchrome_options.add_argument(\"--use-fake-ui-for-media-stream\")\nchrome_options.add_argument(\"--headless=new\")\ndriver = webdriver.Chrome(service=service, options=chrome_options)\nwebsite = f\"{getcwd()}//Functions//Listen//Recognition//index.html\"\ndriver.get(website)\ndef Listen():\n  driver.get(website)\n  driver.find_element(by=By.ID, value='start').click()",
        "detail": "Functions.Listen.listen",
        "documentation": {}
    },
    {
        "label": "chrome_options",
        "kind": 5,
        "importPath": "Functions.Listen.listen",
        "description": "Functions.Listen.listen",
        "peekOfCode": "chrome_options = webdriver.ChromeOptions()\nchrome_options.add_argument(\"--use-fake-ui-for-media-stream\")\nchrome_options.add_argument(\"--headless=new\")\ndriver = webdriver.Chrome(service=service, options=chrome_options)\nwebsite = f\"{getcwd()}//Functions//Listen//Recognition//index.html\"\ndriver.get(website)\ndef Listen():\n  driver.get(website)\n  driver.find_element(by=By.ID, value='start').click()\n  print(\"Listening ...\")",
        "detail": "Functions.Listen.listen",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "Functions.Listen.listen",
        "description": "Functions.Listen.listen",
        "peekOfCode": "driver = webdriver.Chrome(service=service, options=chrome_options)\nwebsite = f\"{getcwd()}//Functions//Listen//Recognition//index.html\"\ndriver.get(website)\ndef Listen():\n  driver.get(website)\n  driver.find_element(by=By.ID, value='start').click()\n  print(\"Listening ...\")\n  while True:\n    text = driver.find_element(by=By.ID, value='output').text\n    if text != \"\":",
        "detail": "Functions.Listen.listen",
        "documentation": {}
    },
    {
        "label": "website",
        "kind": 5,
        "importPath": "Functions.Listen.listen",
        "description": "Functions.Listen.listen",
        "peekOfCode": "website = f\"{getcwd()}//Functions//Listen//Recognition//index.html\"\ndriver.get(website)\ndef Listen():\n  driver.get(website)\n  driver.find_element(by=By.ID, value='start').click()\n  print(\"Listening ...\")\n  while True:\n    text = driver.find_element(by=By.ID, value='output').text\n    if text != \"\":\n      print(f\"You : {text}\")",
        "detail": "Functions.Listen.listen",
        "documentation": {}
    },
    {
        "label": "setup",
        "kind": 2,
        "importPath": "Functions.Speak.speak",
        "description": "Functions.Speak.speak",
        "peekOfCode": "def setup():\n  with open(f\"{os.getcwd()}\\\\env.local.json\", 'r') as j:\n    env = json.loads(j.read())\n  service = Service(ChromeDriverManager().install())\n  driver = webdriver.Chrome(service=service)\n  driver.set_window_position(-10000, 0)\n  website = \"https://pi.ai/talk\"\n  driver.get(website)\n  time.sleep(3)\n  driver.find_element(by=By.XPATH, value=\"//*[@id=\\\"__next\\\"]/main/div/div/button\").click()",
        "detail": "Functions.Speak.speak",
        "documentation": {}
    },
    {
        "label": "speak",
        "kind": 2,
        "importPath": "Functions.Speak.speak",
        "description": "Functions.Speak.speak",
        "peekOfCode": "def speak(driver, msg):\n  driver.find_element(by=By.XPATH, value=\"//*[@id=\\\"__next\\\"]/main/div/div/div[3]/div[1]/div[4]/div/div/textarea\").send_keys(f\"Reply with what is in the quotes AND NOTHING ELSE. \\\"{msg}\\\"\")\n  time.sleep(1)\n  driver.find_element(by=By.XPATH, value=\"//*[@id=\\\"__next\\\"]/main/div/div/div[3]/div[1]/div[4]/div/button\").click()\n  driver.find_element(by=By.XPATH, value=\"//*[@id=\\\"__next\\\"]/main/div/div/div[3]/div[1]/div[4]/div/button\").click()\n  driver.find_element(by=By.XPATH, value=\"//*[@id=\\\"__next\\\"]/main/div/div/div[3]/div[1]/div[4]/div/button\").click()\nif __name__ == '__main__':\n  print('Initiating setup....')\n  driver = setup()\n  print('Setup Complete!')",
        "detail": "Functions.Speak.speak",
        "documentation": {}
    },
    {
        "label": "wake",
        "kind": 2,
        "importPath": "Functions.Wake.wake",
        "description": "Functions.Wake.wake",
        "peekOfCode": "def wake():\n  porcupine = None\n  pa = None\n  audio_stream = None\n  try:\n      porcupine = pvporcupine.create(keywords=['jarvis'])\n      pa = pyaudio.PyAudio()\n      audio_stream = pa.open(\n        rate=porcupine.sample_rate,\n        channels=1,",
        "detail": "Functions.Wake.wake",
        "documentation": {}
    },
    {
        "label": "FULLSCREEN",
        "kind": 5,
        "importPath": "Global.vars",
        "description": "Global.vars",
        "peekOfCode": "FULLSCREEN = True",
        "detail": "Global.vars",
        "documentation": {}
    },
    {
        "label": "PrintPyLog",
        "kind": 2,
        "importPath": "Interface.IF",
        "description": "Interface.IF",
        "peekOfCode": "def PrintPyLog(*args):\n  statement = \"\"\n  for i in args: statement += str(i) + \" \"\n  print()\n  print(f\"💻: {statement}\")",
        "detail": "Interface.IF",
        "documentation": {}
    },
    {
        "label": "Listen",
        "kind": 2,
        "importPath": "Tests.Listen.listen",
        "description": "Tests.Listen.listen",
        "peekOfCode": "def Listen():\n    # Printing a message to indicate that the program is listening\n    print( \"LISTENING ... \")\n    # Opening the website in the Chrome browser\n    driver.get(website)\n    # Clicking the 'start' button on the website to initiate voice recognition\n    driver.find_element(by=By.ID, value='start').click()\n    # Running an infinite loop to continuously listen for voice input\n    while True:\n        # Recording the start time to calculate the time taken for voice recognition",
        "detail": "Tests.Listen.listen",
        "documentation": {}
    },
    {
        "label": "chrome_options",
        "kind": 5,
        "importPath": "Tests.Listen.listen",
        "description": "Tests.Listen.listen",
        "peekOfCode": "chrome_options = webdriver.ChromeOptions()  # Creating ChromeOptions to customize the behavior of the Chrome browser\nchrome_options.add_argument(\"--use-fake-ui-for-media-stream\")  # Adding an argument to simulate a fake UI for media stream\nchrome_options.add_argument(\"--headless=new\")  # Adding an argument to run Chrome in headless mode with a new session\nservice = Service(executable_path=\".\\\\CHROMEDRIVER\\\\chromedriver.exe\")\n# Setting up the Chrome driver with specified service and options\ndriver = webdriver.Chrome(service=service, options=chrome_options)\n# Creating the URL for the website using the current working directory\nwebsite = f\"{getcwd()}\\\\Functions\\\\Listen\\\\index.html\"\n# Opening the website in the Chrome browser\ndriver.get(website)",
        "detail": "Tests.Listen.listen",
        "documentation": {}
    },
    {
        "label": "service",
        "kind": 5,
        "importPath": "Tests.Listen.listen",
        "description": "Tests.Listen.listen",
        "peekOfCode": "service = Service(executable_path=\".\\\\CHROMEDRIVER\\\\chromedriver.exe\")\n# Setting up the Chrome driver with specified service and options\ndriver = webdriver.Chrome(service=service, options=chrome_options)\n# Creating the URL for the website using the current working directory\nwebsite = f\"{getcwd()}\\\\Functions\\\\Listen\\\\index.html\"\n# Opening the website in the Chrome browser\ndriver.get(website)\n# Defining a function named Listen\ndef Listen():\n    # Printing a message to indicate that the program is listening",
        "detail": "Tests.Listen.listen",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "Tests.Listen.listen",
        "description": "Tests.Listen.listen",
        "peekOfCode": "driver = webdriver.Chrome(service=service, options=chrome_options)\n# Creating the URL for the website using the current working directory\nwebsite = f\"{getcwd()}\\\\Functions\\\\Listen\\\\index.html\"\n# Opening the website in the Chrome browser\ndriver.get(website)\n# Defining a function named Listen\ndef Listen():\n    # Printing a message to indicate that the program is listening\n    print( \"LISTENING ... \")\n    # Opening the website in the Chrome browser",
        "detail": "Tests.Listen.listen",
        "documentation": {}
    },
    {
        "label": "website",
        "kind": 5,
        "importPath": "Tests.Listen.listen",
        "description": "Tests.Listen.listen",
        "peekOfCode": "website = f\"{getcwd()}\\\\Functions\\\\Listen\\\\index.html\"\n# Opening the website in the Chrome browser\ndriver.get(website)\n# Defining a function named Listen\ndef Listen():\n    # Printing a message to indicate that the program is listening\n    print( \"LISTENING ... \")\n    # Opening the website in the Chrome browser\n    driver.get(website)\n    # Clicking the 'start' button on the website to initiate voice recognition",
        "detail": "Tests.Listen.listen",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Tests.1_Ollama",
        "description": "Tests.1_Ollama",
        "peekOfCode": "response = ollama.chat(model='llama2', messages=[\n  {\n    'role': 'user',\n    'content': 'Why is the sky blue?',\n  },\n])\nprint(response['message']['content'])\n#? Need to install models on local computer -> Not Possible",
        "detail": "Tests.1_Ollama",
        "documentation": {}
    },
    {
        "label": "removeFilesfromFolder",
        "kind": 2,
        "importPath": "Tests.1_Speak",
        "description": "Tests.1_Speak",
        "peekOfCode": "def removeFilesfromFolder(folder:str):\n  for filename in os.listdir(folder):\n    if filename == \"music.mp3\": return\n    file_path = os.path.join(folder, filename)\n    try:\n      if os.path.isfile(file_path) or os.path.islink(file_path):\n        os.unlink(file_path)\n      elif os.path.isdir(file_path):\n        shutil.rmtree(file_path)\n    except Exception as e:",
        "detail": "Tests.1_Speak",
        "documentation": {}
    },
    {
        "label": "PlayURL",
        "kind": 2,
        "importPath": "Tests.1_Speak",
        "description": "Tests.1_Speak",
        "peekOfCode": "def PlayURL(URL: str):\n  tss = time.time()\n  x = get(URL).content\n  name = f'{os.getcwd()}\\Audio\\{int(time.time())}.mp3'\n  # removeFilesfromFolder(f'{os.getcwd()}\\Audio')\n  with open(name,'wb') as file:\n    file.write(x)\n  print(f\"Time taken to download the file: {time.time() - tss} seconds\")\n  tts = time.time()\n  mixer.music.load(name)",
        "detail": "Tests.1_Speak",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "Tests.1_Speak",
        "description": "Tests.1_Speak",
        "peekOfCode": "url = \"https://ttsmp3.com/makemp3_ai.php\"\nheaders = {\n  'authority': 'ttsmp3.com',\n  'accept': '*/*',\n  'accept-language': 'en-US,en;q=0.9',\n  'content-type': 'application/x-www-form-urlencoded',\n  'origin': 'https://ttsmp3.com',\n  'referer': 'https://ttsmp3.com/ai',\n  'sec-fetch-mode': 'cors',\n  'sec-fetch-site': 'same-origin'",
        "detail": "Tests.1_Speak",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "Tests.1_Speak",
        "description": "Tests.1_Speak",
        "peekOfCode": "headers = {\n  'authority': 'ttsmp3.com',\n  'accept': '*/*',\n  'accept-language': 'en-US,en;q=0.9',\n  'content-type': 'application/x-www-form-urlencoded',\n  'origin': 'https://ttsmp3.com',\n  'referer': 'https://ttsmp3.com/ai',\n  'sec-fetch-mode': 'cors',\n  'sec-fetch-site': 'same-origin'\n}",
        "detail": "Tests.1_Speak",
        "documentation": {}
    },
    {
        "label": "setup",
        "kind": 2,
        "importPath": "Tests.2_Speak",
        "description": "Tests.2_Speak",
        "peekOfCode": "def setup():\n  with open(f\"{os.getcwd()}\\\\env.local.json\", 'r') as j:\n    env = json.loads(j.read())\n  service = Service(ChromeDriverManager().install())\n  driver = webdriver.Chrome(service=service)\n  driver.set_window_position(-10000, 0)\n  website = \"https://pi.ai/talk\"\n  driver.get(website)\n  time.sleep(3)\n  driver.find_element(by=By.XPATH, value=\"//*[@id=\\\"__next\\\"]/main/div/div/button\").click()",
        "detail": "Tests.2_Speak",
        "documentation": {}
    },
    {
        "label": "speak",
        "kind": 2,
        "importPath": "Tests.2_Speak",
        "description": "Tests.2_Speak",
        "peekOfCode": "def speak(driver, msg):\n  driver.find_element(by=By.XPATH, value=\"//*[@id=\\\"__next\\\"]/main/div/div/div[3]/div[1]/div[4]/div/div/textarea\").send_keys(f\"Reply with what is in the quotes AND NOTHING ELSE. \\\"{msg}\\\"\")\n  time.sleep(1)\n  driver.find_element(by=By.XPATH, value=\"//*[@id=\\\"__next\\\"]/main/div/div/div[3]/div[1]/div[4]/div/button\").click()\n  driver.find_element(by=By.XPATH, value=\"//*[@id=\\\"__next\\\"]/main/div/div/div[3]/div[1]/div[4]/div/button\").click()\n  driver.find_element(by=By.XPATH, value=\"//*[@id=\\\"__next\\\"]/main/div/div/div[3]/div[1]/div[4]/div/button\").click()\nif __name__ == '__main__':\n  print('Initiating setup....')\n  driver = setup()\n  print('Setup Complete!')",
        "detail": "Tests.2_Speak",
        "documentation": {}
    },
    {
        "label": "speak",
        "kind": 2,
        "importPath": "Tests.3_Speak",
        "description": "Tests.3_Speak",
        "peekOfCode": "def speak(Text:str, GetTimeComplexity:bool=False, Voice:str=\"en-US-SteffanNeural\", Media:str=os.getcwd()):\n  \"A function that converts Text to Speech with Realestic Voices. Some Voices That you can select other than the default are: \"\n  st = time.time()\n  command = f'edge-tts --voice \"{Voice}\" --text \"{Text}\" --write-media \"{os.getcwd()}\\\\Audio\\\\{st}.mp3\"'\n  os.system(command)\n  et = time.time() - st\n  if GetTimeComplexity == True: print(f\"The time complexity of speak is {et} seconds\")\n  try: playsound.playsound(f\"{os.getcwd()}\\\\Audio\\\\{st}.mp3\")\n  except: print(\"Unsuccessful at playing Sound: Playsound error\")\nif __name__ == \"__main__\": ",
        "detail": "Tests.3_Speak",
        "documentation": {}
    },
    {
        "label": "split",
        "kind": 2,
        "importPath": "Tests.4_Speak",
        "description": "Tests.4_Speak",
        "peekOfCode": "def split(text: str) -> list[str]:\n    \"\"\"\n    Split the text into sentences.\n    If the text contains substrings \"<prd>\" or \"<stop>\", they would lead \n    to incorrect splitting because they are used as markers for splitting.\n    :param text: text to be split into sentences\n    :type text: str\n    :return: list of sentences\n    :rtype: list[str]\n    \"\"\"",
        "detail": "Tests.4_Speak",
        "documentation": {}
    },
    {
        "label": "speak",
        "kind": 2,
        "importPath": "Tests.4_Speak",
        "description": "Tests.4_Speak",
        "peekOfCode": "def speak(Text:str, GetTimeComplexity:bool=False, Voice:str=\"en-US-SteffanNeural\", Media:str=os.getcwd()):\n  \"A function that converts Text to Speech with Realestic Voices. Some Voices That you can select other than the default are: \"\n  st = time.time()\n  command = f'edge-tts --voice \"{Voice}\" --text \"{Text}\" --write-media \"{os.getcwd()}\\\\Audio\\\\{st}.mp3\"'\n  os.system(command)\n  et = time.time() - st\n  if GetTimeComplexity == True: print(f\"The time complexity of speak is {et} seconds\")\n  try: playsound.playsound(f\"{os.getcwd()}\\\\Audio\\\\{st}.mp3\")\n  except: print(\"Unsuccessful at playing Sound: Playsound error\")\nif __name__ == \"__main__\": ",
        "detail": "Tests.4_Speak",
        "documentation": {}
    },
    {
        "label": "prefixes",
        "kind": 5,
        "importPath": "Tests.4_Speak",
        "description": "Tests.4_Speak",
        "peekOfCode": "prefixes = \"(Mr|St|Mrs|Ms|Dr)[.]\"\nsuffixes = \"(Inc|Ltd|Jr|Sr|Co)\"\nstarters = \"(Mr|Mrs|Ms|Dr|Prof|Capt|Cpt|Lt|He\\s|She\\s|It\\s|They\\s|Their\\s|Our\\s|We\\s|But\\s|However\\s|That\\s|This\\s|Wherever)\"\nacronyms = \"([A-Z][.][A-Z][.](?:[A-Z][.])?)\"\nwebsites = \"[.](com|net|org|io|gov|edu|me)\"\ndigits = \"([0-9])\"\nmultiple_dots = r'\\.{2,}'\ndef split(text: str) -> list[str]:\n    \"\"\"\n    Split the text into sentences.",
        "detail": "Tests.4_Speak",
        "documentation": {}
    },
    {
        "label": "suffixes",
        "kind": 5,
        "importPath": "Tests.4_Speak",
        "description": "Tests.4_Speak",
        "peekOfCode": "suffixes = \"(Inc|Ltd|Jr|Sr|Co)\"\nstarters = \"(Mr|Mrs|Ms|Dr|Prof|Capt|Cpt|Lt|He\\s|She\\s|It\\s|They\\s|Their\\s|Our\\s|We\\s|But\\s|However\\s|That\\s|This\\s|Wherever)\"\nacronyms = \"([A-Z][.][A-Z][.](?:[A-Z][.])?)\"\nwebsites = \"[.](com|net|org|io|gov|edu|me)\"\ndigits = \"([0-9])\"\nmultiple_dots = r'\\.{2,}'\ndef split(text: str) -> list[str]:\n    \"\"\"\n    Split the text into sentences.\n    If the text contains substrings \"<prd>\" or \"<stop>\", they would lead ",
        "detail": "Tests.4_Speak",
        "documentation": {}
    },
    {
        "label": "starters",
        "kind": 5,
        "importPath": "Tests.4_Speak",
        "description": "Tests.4_Speak",
        "peekOfCode": "starters = \"(Mr|Mrs|Ms|Dr|Prof|Capt|Cpt|Lt|He\\s|She\\s|It\\s|They\\s|Their\\s|Our\\s|We\\s|But\\s|However\\s|That\\s|This\\s|Wherever)\"\nacronyms = \"([A-Z][.][A-Z][.](?:[A-Z][.])?)\"\nwebsites = \"[.](com|net|org|io|gov|edu|me)\"\ndigits = \"([0-9])\"\nmultiple_dots = r'\\.{2,}'\ndef split(text: str) -> list[str]:\n    \"\"\"\n    Split the text into sentences.\n    If the text contains substrings \"<prd>\" or \"<stop>\", they would lead \n    to incorrect splitting because they are used as markers for splitting.",
        "detail": "Tests.4_Speak",
        "documentation": {}
    },
    {
        "label": "acronyms",
        "kind": 5,
        "importPath": "Tests.4_Speak",
        "description": "Tests.4_Speak",
        "peekOfCode": "acronyms = \"([A-Z][.][A-Z][.](?:[A-Z][.])?)\"\nwebsites = \"[.](com|net|org|io|gov|edu|me)\"\ndigits = \"([0-9])\"\nmultiple_dots = r'\\.{2,}'\ndef split(text: str) -> list[str]:\n    \"\"\"\n    Split the text into sentences.\n    If the text contains substrings \"<prd>\" or \"<stop>\", they would lead \n    to incorrect splitting because they are used as markers for splitting.\n    :param text: text to be split into sentences",
        "detail": "Tests.4_Speak",
        "documentation": {}
    },
    {
        "label": "websites",
        "kind": 5,
        "importPath": "Tests.4_Speak",
        "description": "Tests.4_Speak",
        "peekOfCode": "websites = \"[.](com|net|org|io|gov|edu|me)\"\ndigits = \"([0-9])\"\nmultiple_dots = r'\\.{2,}'\ndef split(text: str) -> list[str]:\n    \"\"\"\n    Split the text into sentences.\n    If the text contains substrings \"<prd>\" or \"<stop>\", they would lead \n    to incorrect splitting because they are used as markers for splitting.\n    :param text: text to be split into sentences\n    :type text: str",
        "detail": "Tests.4_Speak",
        "documentation": {}
    },
    {
        "label": "digits",
        "kind": 5,
        "importPath": "Tests.4_Speak",
        "description": "Tests.4_Speak",
        "peekOfCode": "digits = \"([0-9])\"\nmultiple_dots = r'\\.{2,}'\ndef split(text: str) -> list[str]:\n    \"\"\"\n    Split the text into sentences.\n    If the text contains substrings \"<prd>\" or \"<stop>\", they would lead \n    to incorrect splitting because they are used as markers for splitting.\n    :param text: text to be split into sentences\n    :type text: str\n    :return: list of sentences",
        "detail": "Tests.4_Speak",
        "documentation": {}
    },
    {
        "label": "multiple_dots",
        "kind": 5,
        "importPath": "Tests.4_Speak",
        "description": "Tests.4_Speak",
        "peekOfCode": "multiple_dots = r'\\.{2,}'\ndef split(text: str) -> list[str]:\n    \"\"\"\n    Split the text into sentences.\n    If the text contains substrings \"<prd>\" or \"<stop>\", they would lead \n    to incorrect splitting because they are used as markers for splitting.\n    :param text: text to be split into sentences\n    :type text: str\n    :return: list of sentences\n    :rtype: list[str]",
        "detail": "Tests.4_Speak",
        "documentation": {}
    },
    {
        "label": "Initialise",
        "kind": 2,
        "importPath": "Tests.main",
        "description": "Tests.main",
        "peekOfCode": "def Initialise():\n  keyboard.press_and_release(\"win+up\")\n  print(\"Connected 🚀🚀🚀\")\n  Jarvis()\n#? Main function\n# @eel.expose\ndef Jarvis():\n  porcupine = None\n  pa = None\n  audio_stream = None",
        "detail": "Tests.main",
        "documentation": {}
    },
    {
        "label": "Jarvis",
        "kind": 2,
        "importPath": "Tests.main",
        "description": "Tests.main",
        "peekOfCode": "def Jarvis():\n  porcupine = None\n  pa = None\n  audio_stream = None\n  print(\"Jarvis is now listening....\")\n  try:\n    porcupine = pvporcupine.create(keywords=['jarvis'])\n    pa = pyaudio.PyAudio()\n    audio_stream = pa.open( rate=porcupine.sample_rate, channels=1, format=pyaudio.paInt16, input=True, frames_per_buffer=porcupine.frame_length )\n    while True:",
        "detail": "Tests.main",
        "documentation": {}
    },
    {
        "label": "play_mp3",
        "kind": 2,
        "importPath": "Tests.playsoundT",
        "description": "Tests.playsoundT",
        "peekOfCode": "def play_mp3(file_path):\n    playsound(file_path)\n# Example usage\nmp3_file = \"Audio\\\\data.mp3\"\nplay_mp3(\"E:\\\\Jarvis-v11\\\\Audio\\\\data.mp3\")",
        "detail": "Tests.playsoundT",
        "documentation": {}
    },
    {
        "label": "mp3_file",
        "kind": 5,
        "importPath": "Tests.playsoundT",
        "description": "Tests.playsoundT",
        "peekOfCode": "mp3_file = \"Audio\\\\data.mp3\"\nplay_mp3(\"E:\\\\Jarvis-v11\\\\Audio\\\\data.mp3\")",
        "detail": "Tests.playsoundT",
        "documentation": {}
    },
    {
        "label": "Jarvis",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def Jarvis():\n  print(\"\\n🚀: Connected Jarvis with GUI\")\n  if FULLSCREEN: keyboard.press_and_release(\"win+up\")\n  # playsound(f\"{os.getcwd()}\\\\Assets\\\\Sounds\\\\Start.mp3\", False)  \n  import time\n  eel.ShowIntro() #type: ignore #! Removing the start intro animation not found error.\n  eel.showMainWindow() #type: ignore #! Removing the start intro animation not found error.\n  for file in os.listdir(os.getcwd() + \"\\\\Audio\"):  \n    if file.endswith(\".mp3\") and file != \"music.mp3\": os.remove(os.path.join(os.getcwd() + \"\\\\Audio\", file))\n  #? All the imports",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "porcupine",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "porcupine = None\npa = None\naudio_stream = None\n@eel.expose\ndef Jarvis():\n  print(\"\\n🚀: Connected Jarvis with GUI\")\n  if FULLSCREEN: keyboard.press_and_release(\"win+up\")\n  # playsound(f\"{os.getcwd()}\\\\Assets\\\\Sounds\\\\Start.mp3\", False)  \n  import time\n  eel.ShowIntro() #type: ignore #! Removing the start intro animation not found error.",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "pa",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "pa = None\naudio_stream = None\n@eel.expose\ndef Jarvis():\n  print(\"\\n🚀: Connected Jarvis with GUI\")\n  if FULLSCREEN: keyboard.press_and_release(\"win+up\")\n  # playsound(f\"{os.getcwd()}\\\\Assets\\\\Sounds\\\\Start.mp3\", False)  \n  import time\n  eel.ShowIntro() #type: ignore #! Removing the start intro animation not found error.\n  eel.showMainWindow() #type: ignore #! Removing the start intro animation not found error.",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "audio_stream",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "audio_stream = None\n@eel.expose\ndef Jarvis():\n  print(\"\\n🚀: Connected Jarvis with GUI\")\n  if FULLSCREEN: keyboard.press_and_release(\"win+up\")\n  # playsound(f\"{os.getcwd()}\\\\Assets\\\\Sounds\\\\Start.mp3\", False)  \n  import time\n  eel.ShowIntro() #type: ignore #! Removing the start intro animation not found error.\n  eel.showMainWindow() #type: ignore #! Removing the start intro animation not found error.\n  for file in os.listdir(os.getcwd() + \"\\\\Audio\"):  ",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "o = 0\neel.start(\"index.html\", block=False)\nwhile True:\n    eel.sleep(1)\n    print(o)\n    o += 10",
        "detail": "test",
        "documentation": {}
    }
]